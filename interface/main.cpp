#include <Arduino.h>
#include <U8g2lib.h>
#include <STM32FreeRTOS.h>
#include <ES_CAN.h>

int32_t delayCounter = 0;

#define FIFO_SIZE 4096
#define DELAY_LENGTH 8000


//Constants
  const uint32_t interval = 100; //Display update interval

// Main keyboard bool
  bool is_main = true;
  volatile int8_t my_octave = 4;
  volatile int8_t octave_modifier = 1;
  volatile int8_t octave_modifier1 = 1;
  volatile bool reverb_active = false;
  volatile int8_t reverb_count = 0;
  

//handshake
bool has_left = false;
bool has_right = false;
uint32_t ID;

//Pin definitions
  //Row select and enable
  const int RA0_PIN = D3;
  const int RA1_PIN = D6;
  const int RA2_PIN = D12;
  const int REN_PIN = A5;

  //Matrix input and output
  const int C0_PIN = A2;
  const int C1_PIN = D9;
  const int C2_PIN = A6;
  const int C3_PIN = D1;
  const int OUT_PIN = D11;

  //Audio analogue out
  const int OUTL_PIN = A4;
  const int OUTR_PIN = A3;

  //Joystick analogue in
  const int JOYY_PIN = A0;
  const int JOYX_PIN = A1;

  //Output multiplexer bits
  const int DEN_BIT = 3;
  const int DRST_BIT = 4;
  const int HKOW_BIT = 5;
  const int HKOE_BIT = 6;

//Display driver object
U8G2_SSD1305_128X32_NONAME_F_HW_I2C u8g2(U8G2_R0);

// Mutex
static uint8_t keyArray[7];
SemaphoreHandle_t keyArrayMutex;
SemaphoreHandle_t CAN_TX_Semaphore;

// CAN queue handler
QueueHandle_t msgInQ;
QueueHandle_t msgIn1Q;
QueueHandle_t msgOutQ;

// Sample queue handler
QueueHandle_t DelayQ;
uint64_t time_delta = 0;
uint64_t time_delta1 = 0;


// waveform generation
volatile int16_t currentIndex;
const int32_t stepSizes [] = {51076922, 54112683, 57330004, 60740598, 64352275, 68178701, 72231588, 76528508, 81077269, 85899346, 91006452, 96418111, 0};
const int32_t stepSizeLUT [] = {141515, 131515, 111515, 71515, 151415, 151315, 151115, 150715, 151514, 151513, 151511, 151507};
const String Notes [] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "--"};
const double frequencies [] = {261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392, 415.3, 440, 466.16, 493.88, 0};

//Octave recognition
const int8_t oct_count [] =    {31,15,7,3,1,0,0,0,0};
const int8_t oct_lenCount [] = {1,1,1,1,1,1,2,3,4};

// sinewave lookup tables
const int16_t sine_lut_sizes [] = {84, 79, 74, 70, 66, 62, 59, 56, 52, 50, 47, 44, 0};

const int16_t sine_lut_start_index [] = {0, 85, 165, 240, 311, 378, 441, 501, 558, 611, 662, 710, 0};

const int16_t wave_lut [] = {
  0, 2314, 4615, 6891, 9128, 11314, 13437, 15485, 17447, 19311, 21068, 22706, 24219, 25596, 26830, 27914, 28843, 29611, 30213, 30647, 30910, 31000, 30917, 30662, 30236, 29641, 28880, 27958, 26881, 25653, 24282, 22776, 21142, 19391, 17531, 15574, 13529, 11409, 9226, 6991, 4717, 2416, 102, -2212, -4514, -6791, -9030, -11219, -13345, -15397, -17362, -19231, -20992, -22637, -24155, -25538, -26778, -27870, -28805, -29580, -30190, -30631, -30902, -31000, -30925, -30677, -30258, -29670, -28917, -28002, -26932, -25710, -24346, -22845, -21217, -19470, -17615, -15662, -13621, -11504, -9323, -7090, -4817, -2518, -204,
  0, 2451, 4888, 7293, 9653, 11952, 14177, 16312, 18346, 20265, 22056, 23710, 25215, 26562, 27743, 28750, 29577, 30218, 30671, 30931, 30998, 30870, 30549, 30037, 29336, 28452, 27390, 26156, 24758, 23205, 21507, 19674, 17718, 15651, 13486, 11236, 8916, 6541, 4124, 1681, -772, -3220, -5648, -8041, -10384, -12661, -14859, -16964, -18963, -20843, -22592, -24200, -25656, -26952, -28079, -29030, -29799, -30381, -30773, -30973, -30978, -30790, -30408, -29836, -29078, -28137, -27020, -25733, -24286, -22686, -20944, -19072, -17079, -14980, -12787, -10513, -8174, -5784, -3357, -910,
  0, 2597, 5176, 7718, 10206, 12622, 14950, 17172, 19274, 21240, 23057, 24712, 26193, 27490, 28593, 29496, 30191, 30675, 30942, 30992, 30824, 30439, 29841, 29032, 28020, 26811, 25413, 23836, 22092, 20192, 18151, 15982, 13701, 11323, 8866, 6346, 3782, 1191, -1408, -3997, -6558, -9073, -11525, -13895, -16168, -18326, -20357, -22244, -23974, -25536, -26919, -28112, -29108, -29899, -30480, -30846, -30996, -30928, -30642, -30142, -29429, -28509, -27389, -26076, -24580, -22911, -21081, -19103, -16991, -14759, -12424, -10001, -7508, -4962, -2381,
  0, 2751, 5480, 8166, 10788, 13324, 15756, 18063, 20227, 22232, 24062, 25701, 27138, 28361, 29360, 30127, 30656, 30944, 30987, 30786, 30342, 29659, 28741, 27597, 26235, 24666, 22902, 20958, 18848, 16590, 14201, 11699, 9105, 6440, 3723, 978, -1776, -4515, -7219, -9866, -12435, -14906, -17259, -19476, -21540, -23433, -25142, -26652, -27952, -29031, -29881, -30496, -30870, -31000, -30886, -30527, -29928, -29093, -28029, -26743, -25246, -23550, -21668, -19615, -17408, -15063, -12599, -10035, -7393, -4692, -1954,
  0, 2914, 5802, 8639, 11400, 14059, 16594, 18982, 21202, 23234, 25060, 26665, 28033, 29153, 30015, 30611, 30935, 30986, 30763, 30267, 29503, 28478, 27200, 25682, 23936, 21978, 19826, 17498, 15015, 12399, 9673, 6862, 3989, 1082, -1835, -4736, -7595, -10387, -13086, -15670, -18115, -20400, -22504, -24408, -26097, -27554, -28767, -29726, -30421, -30847, -31000, -30878, -30482, -29817, -28888, -27703, -26272, -24609, -22728, -20645, -18380, -15952, -13383, -10695, -7912, -5060, -2162,
  0, 3087, 6143, 9138, 12042, 14827, 17464, 19928, 22193, 24238, 26042, 27587, 28858, 29842, 30530, 30914, 30990, 30759, 30222, 29384, 28255, 26845, 25167, 23240, 21082, 18714, 16160, 13445, 10597, 7644, 4614, 1539, -1552, -4627, -7656, -10610, -13457, -16171, -18724, -21091, -23249, -25175, -26851, -28260, -29389, -30225, -30761, -30991, -30913, -30527, -29839, -28853, -27581, -26035, -24230, -22184, -19917, -17453, -14815, -12030, -9125, -6130, -3074,
  0, 3270, 6503, 9663, 12716, 15627, 18364, 20896, 23194, 25234, 26993, 28450, 29590, 30400, 30871, 30997, 30777, 30215, 29315, 28088, 26548, 24711, 22599, 20235, 17645, 14859, 11906, 8821, 5637, 2391, -883, -4146, -7363, -10498, -13516, -16383, -19067, -21539, -23770, -25737, -27416, -28789, -29841, -30560, -30939, -30972, -30659, -30005, -29016, -27703, -26081, -24168, -21986, -19558, -16913, -14078, -11086, -7971, -4767, -1510,
  0, 3463, 6883, 10217, 13423, 16461, 19293, 21883, 24199, 26212, 27897, 29233, 30202, 30794, 31000, 30818, 30250, 29303, 27989, 26325, 24331, 22033, 19458, 16641, 13614, 10418, 7090, 3674, 212, -3252, -6676, -10016, -13231, -16280, -19126, -21732, -24066, -26098, -27804, -29161, -30154, -30769, -30998, -30840, -30295, -29371, -28080, -26436, -24462, -22182, -19623, -16819, -13805, -10617, -7297, -3885, -425,
  0, 3668, 7285, 10799, 14162, 17326, 20246, 22881, 25196, 27156, 28734, 29909, 30663, 30987, 30875, 30330, 29358, 27973, 26196, 24050, 21567, 18780, 15730, 12458, 9012, 5439, 1789, -1886, -5534, -9104, -12547, -15813, -18857, -21636, -24111, -26247, -28015, -29389, -30349, -30884, -30984, -30649, -29883, -28698, -27109, -25139, -22816, -20173, -17245, -14076, -10709, -7191, -3572,
  0, 3885, 7709, 11412, 14934, 18221, 21221, 23886, 26174, 28050, 29483, 30451, 30939, 30939, 30451, 29483, 28050, 26174, 23886, 21221, 18221, 14934, 11412, 7709, 3885, 0, -3885, -7709, -11412, -14934, -18221, -21221, -23886, -26174, -28050, -29483, -30451, -30939, -30939, -30451, -29483, -28050, -26174, -23886, -21221, -18221, -14934, -11412, -7709, -3885, 0,
  0, 4115, 8157, 12055, 15739, 19145, 22212, 24886, 27120, 28873, 30116, 30825, 30989, 30604, 29678, 28226, 26275, 23859, 21021, 17810, 14285, 10506, 6542, 2462, -1662, -5757, -9749, -13569, -17149, -20425, -23340, -25842, -27886, -29437, -30466, -30957, -30900, -30295, -29155, -27499, -25356, -22764, -19769, -16424, -12789, -8927, -4908, -801,
  0, 4358, 8630, 12730, 16577, 20095, 23214, 25872, 28016, 29603, 30603, 30994, 30770, 29935, 28505, 26509, 23987, 20988, 17572, 13807, 9768, 5535, 1192, -3175, -7479, -11634, -15558, -19173, -22407, -25196, -27485, -29228, -30390, -30948, -30892, -30223, -28953, -27107, -24724, -21849, -18541, -14864, -10892, -6703, -2382,

  -31000, -30263, -29525, -28788, -28051, -27313, -26576, -25839, -25101, -24364, -23627, -22889, -22152, -21415, -20678, -19940, -19203, -18466, -17728, -16991, -16254, -15516, -14779, -14042, -13304, -12567, -11830, -11092, -10355, -9618, -8880, -8143, -7406, -6668, -5931, -5194, -4456, -3719, -2982, -2244, -1507, -770, -33, 705, 1442, 2179, 2917, 3654, 4391, 5129, 5866, 6603, 7341, 8078, 8815, 9553, 10290, 11027, 11765, 12502, 13239, 13977, 14714, 15451, 16189, 16926, 17663, 18401, 19138, 19875, 20612, 21350, 22087, 22824, 23562, 24299, 25036, 25774, 26511, 27248, 27986, 28723, 29460, 30198, 30935,
  -31000, -30219, -29438, -28657, -27875, -27094, -26313, -25532, -24751, -23970, -23189, -22407, -21626, -20845, -20064, -19283, -18502, -17721, -16939, -16158, -15377, -14596, -13815, -13034, -12253, -11471, -10690, -9909, -9128, -8347, -7566, -6785, -6003, -5222, -4441, -3660, -2879, -2098, -1317, -535, 246, 1027, 1808, 2589, 3370, 4151, 4933, 5714, 6495, 7276, 8057, 8838, 9619, 10401, 11182, 11963, 12744, 13525, 14306, 15087, 15869, 16650, 17431, 18212, 18993, 19774, 20555, 21337, 22118, 22899, 23680, 24461, 25242, 26023, 26805, 27586, 28367, 29148, 29929, 30710,
  -31000, -30172, -29345, -28517, -27690, -26862, -26034, -25207, -24379, -23552, -22724, -21897, -21069, -20241, -19414, -18586, -17759, -16931, -16103, -15276, -14448, -13621, -12793, -11965, -11138, -10310, -9483, -8655, -7828, -7000, -6172, -5345, -4517, -3690, -2862, -2034, -1207, -379, 448, 1276, 2103, 2931, 3759, 4586, 5414, 6241, 7069, 7897, 8724, 9552, 10379, 11207, 12035, 12862, 13690, 14517, 15345, 16172, 17000, 17828, 18655, 19483, 20310, 21138, 21966, 22793, 23621, 24448, 25276, 26104, 26931, 27759, 28586, 29414, 30241,
  -31000, -30123, -29246, -28370, -27493, -26616, -25739, -24862, -23985, -23109, -22232, -21355, -20478, -19601, -18725, -17848, -16971, -16094, -15217, -14340, -13464, -12587, -11710, -10833, -9956, -9079, -8203, -7326, -6449, -5572, -4695, -3819, -2942, -2065, -1188, -311, 566, 1442, 2319, 3196, 4073, 4950, 5826, 6703, 7580, 8457, 9334, 10211, 11087, 11964, 12841, 13718, 14595, 15472, 16348, 17225, 18102, 18979, 19856, 20732, 21609, 22486, 23363, 24240, 25117, 25993, 26870, 27747, 28624, 29501, 30377,
  -31000, -30071, -29142, -28213, -27284, -26355, -25426, -24497, -23568, -22639, -21710, -20781, -19853, -18924, -17995, -17066, -16137, -15208, -14279, -13350, -12421, -11492, -10563, -9634, -8705, -7776, -6847, -5918, -4989, -4060, -3131, -2202, -1273, -344, 585, 1514, 2442, 3371, 4300, 5229, 6158, 7087, 8016, 8945, 9874, 10803, 11732, 12661, 13590, 14519, 15448, 16377, 17306, 18235, 19164, 20093, 21022, 21951, 22880, 23808, 24737, 25666, 26595, 27524, 28453, 29382, 30311,
  -31000, -30016, -29032, -28047, -27063, -26079, -25095, -24111, -23126, -22142, -21158, -20174, -19190, -18205, -17221, -16237, -15253, -14269, -13285, -12300, -11316, -10332, -9348, -8364, -7379, -6395, -5411, -4427, -3443, -2458, -1474, -490, 494, 1478, 2463, 3447, 4431, 5415, 6399, 7384, 8368, 9352, 10336, 11320, 12305, 13289, 14273, 15257, 16241, 17225, 18210, 19194, 20178, 21162, 22146, 23131, 24115, 25099, 26083, 27067, 28052, 29036, 30020,
  -31000, -29957, -28915, -27872, -26829, -25787, -24744, -23701, -22658, -21616, -20573, -19530, -18488, -17445, -16402, -15360, -14317, -13274, -12231, -11189, -10146, -9103, -8061, -7018, -5975, -4933, -3890, -2847, -1804, -762, 281, 1324, 2366, 3409, 4452, 5494, 6537, 7580, 8623, 9665, 10708, 11751, 12793, 13836, 14879, 15921, 16964, 18007, 19050, 20092, 21135, 22178, 23220, 24263, 25306, 26348, 27391, 28434, 29477, 30519,
  -31000, -29895, -28791, -27686, -26581, -25476, -24372, -23267, -22162, -21057, -19953, -18848, -17743, -16639, -15534, -14429, -13324, -12220, -11115, -10010, -8905, -7801, -6696, -5591, -4487, -3382, -2277, -1172, -68, 1037, 2142, 3247, 4351, 5456, 6561, 7665, 8770, 9875, 10980, 12084, 13189, 14294, 15399, 16503, 17608, 18713, 19817, 20922, 22027, 23132, 24236, 25341, 26446, 27551, 28655, 29760, 30865,
  -31000, -29830, -28659, -27489, -26318, -25148, -23978, -22807, -21637, -20466, -19296, -18126, -16955, -15785, -14615, -13444, -12274, -11103, -9933, -8763, -7592, -6422, -5251, -4081, -2911, -1740, -570, 601, 1771, 2941, 4112, 5282, 6453, 7623, 8793, 9964, 11134, 12304, 13475, 14645, 15816, 16986, 18156, 19327, 20497, 21668, 22838, 24008, 25179, 26349, 27520, 28690, 29860,
  -31000, -29760, -28520, -27280, -26040, -24800, -23560, -22320, -21080, -19840, -18600, -17360, -16120, -14880, -13640, -12400, -11160, -9920, -8680, -7440, -6200, -4960, -3720, -2480, -1240, 0, 1240, 2480, 3720, 4960, 6200, 7440, 8680, 9920, 11160, 12400, 13640, 14880, 16120, 17360, 18600, 19840, 21080, 22320, 23560, 24800, 26040, 27280, 28520, 29760, -31000,
  -31000, -29686, -28373, -27059, -25745, -24431, -23118, -21804, -20490, -19176, -17863, -16549, -15235, -13922, -12608, -11294, -9980, -8667, -7353, -6039, -4726, -3412, -2098, -784, 529, 1843, 3157, 4471, 5784, 7098, 8412, 9725, 11039, 12353, 13667, 14980, 16294, 17608, 18921, 20235, 21549, 22863, 24176, 25490, 26804, 28118, 29431, 30745,
  -31000, -29608, -28216, -26824, -25433, -24041, -22649, -21257, -19865, -18473, -17082, -15690, -14298, -12906, -11514, -10122, -8731, -7339, -5947, -4555, -3163, -1771, -379, 1012, 2404, 3796, 5188, 6580, 7972, 9363, 10755, 12147, 13539, 14931, 16323, 17715, 19106, 20498, 21890, 23282, 24674, 26066, 27457, 28849, 30241,

  -31000, -29525, -28051, -26576, -25101, -23627, -22152, -20678, -19203, -17728, -16254, -14779, -13304, -11830, -10355, -8880, -7406, -5931, -4456, -2982, -1507, -33, 1442, 2917, 4391, 5866, 7341, 8815, 10290, 11765, 13239, 14714, 16189, 17663, 19138, 20612, 22087, 23562, 25036, 26511, 27986, 29460, 30935, 29590, 28116, 26641, 25166, 23692, 22217, 20743, 19268, 17793, 16319, 14844, 13369, 11895, 10420, 8945, 7471, 5996, 4521, 3047, 1572, 98, -1377, -2852, -4326, -5801, -7276, -8750, -10225, -11700, -13174, -14649, -16123, -17598, -19073, -20547, -22022, -23497, -24971, -26446, -27921, -29395, -30870, 
  -31000, -29438, -27875, -26313, -24751, -23189, -21626, -20064, -18502, -16939, -15377, -13815, -12253, -10690, -9128, -7566, -6003, -4441, -2879, -1317, 246, 1808, 3370, 4933, 6495, 8057, 9619, 11182, 12744, 14306, 15869, 17431, 18993, 20555, 22118, 23680, 25242, 26805, 28367, 29929, 30509, 28946, 27384, 25822, 24259, 22697, 21135, 19572, 18010, 16448, 14886, 13323, 11761, 10199, 8636, 7074, 5512, 3950, 2387, 825, -737, -2300, -3862, -5424, -6986, -8549, -10111, -11673, -13236, -14798, -16360, -17922, -19485, -21047, -22609, -24172, -25734, -27296, -28858, -30421, 
  -31000, -29345, -27690, -26034, -24379, -22724, -21069, -19414, -17759, -16103, -14448, -12793, -11138, -9483, -7828, -6172, -4517, -2862, -1207, 448, 2103, 3759, 5414, 7069, 8724, 10379, 12035, 13690, 15345, 17000, 18655, 20310, 21966, 23621, 25276, 26931, 28586, 30241, 30103, 28448, 26793, 25138, 23483, 21827, 20172, 18517, 16862, 15207, 13552, 11896, 10241, 8586, 6931, 5276, 3621, 1965, 310, -1345, -3000, -4655, -6310, -7966, -9621, -11276, -12931, -14586, -16242, -17897, -19552, -21207, -22862, -24517, -26173, -27828, -29483, 
  -31000, -29246, -27493, -25739, -23985, -22232, -20478, -18725, -16971, -15217, -13464, -11710, -9956, -8203, -6449, -4695, -2942, -1188, 566, 2319, 4073, 5826, 7580, 9334, 11087, 12841, 14595, 16348, 18102, 19856, 21609, 23363, 25117, 26870, 28624, 30377, 29869, 28115, 26362, 24608, 22854, 21101, 19347, 17593, 15840, 14086, 12332, 10579, 8825, 7072, 5318, 3564, 1811, 57, -1697, -3450, -5204, -6958, -8711, -10465, -12219, -13972, -15726, -17479, -19233, -20987, -22740, -24494, -26248, -28001, -29755, 
  -31000, -29142, -27284, -25426, -23568, -21710, -19853, -17995, -16137, -14279, -12421, -10563, -8705, -6847, -4989, -3131, -1273, 585, 2442, 4300, 6158, 8016, 9874, 11732, 13590, 15448, 17306, 19164, 21022, 22880, 24737, 26595, 28453, 30311, 29831, 27973, 26115, 24257, 22399, 20541, 18683, 16826, 14968, 13110, 11252, 9394, 7536, 5678, 3820, 1962, 104, -1754, -3612, -5469, -7327, -9185, -11043, -12901, -14759, -16617, -18475, -20333, -22191, -24049, -25907, -27764, -29622, 
  -31000, -29032, -27063, -25095, -23126, -21158, -19190, -17221, -15253, -13285, -11316, -9348, -7379, -5411, -3443, -1474, 494, 2463, 4431, 6399, 8368, 10336, 12305, 14273, 16241, 18210, 20178, 22146, 24115, 26083, 28052, 30020, 30012, 28043, 26075, 24106, 22138, 20170, 18201, 16233, 14265, 12296, 10328, 8359, 6391, 4423, 2454, 486, -1483, -3451, -5419, -7388, -9356, -11325, -13293, -15261, -17230, -19198, -21166, -23135, -25103, -27072, -29040, 
  -31000, -28915, -26829, -24744, -22658, -20573, -18488, -16402, -14317, -12231, -10146, -8061, -5975, -3890, -1804, 281, 2366, 4452, 6537, 8623, 10708, 12793, 14879, 16964, 19050, 21135, 23220, 25306, 27391, 29477, 30438, 28353, 26267, 24182, 22096, 20011, 17926, 15840, 13755, 11669, 9584, 7499, 5413, 3328, 1242, -843, -2928, -5014, -7099, -9185, -11270, -13355, -15441, -17526, -19612, -21697, -23782, -25868, -27953, -30038, 
  -31000, -28791, -26581, -24372, -22162, -19953, -17743, -15534, -13324, -11115, -8905, -6696, -4487, -2277, -68, 2142, 4351, 6561, 8770, 10980, 13189, 15399, 17608, 19817, 22027, 24236, 26446, 28655, 30865, 28926, 26716, 24507, 22297, 20088, 17879, 15669, 13460, 11250, 9041, 6831, 4622, 2412, 203, -2007, -4216, -6425, -8635, -10844, -13054, -15263, -17473, -19682, -21892, -24101, -26311, -28520, -30729, 
  -31000, -28659, -26318, -23978, -21637, -19296, -16955, -14615, -12274, -9933, -7592, -5251, -2911, -570, 1771, 4112, 6453, 8793, 11134, 13475, 15816, 18156, 20497, 22838, 25179, 27520, 29860, 29799, 27458, 25117, 22777, 20436, 18095, 15754, 13413, 11073, 8732, 6391, 4050, 1710, -631, -2972, -5313, -7654, -9994, -12335, -14676, -17017, -19358, -21698, -24039, -26380, -28721, 
  -31000, -28520, -26040, -23560, -21080, -18600, -16120, -13640, -11160, -8680, -6200, -3720, -1240, 1240, 3720, 6200, 8680, 11160, 13640, 16120, 18600, 21080, 23560, 26040, 28520, 31000, 28520, 26040, 23560, 21080, 18600, 16120, 13640, 11160, 8680, 6200, 3720, 1240, -1240, -3720, -6200, -8680, -11160, -13640, -16120, -18600, -21080, -23560, -26040, -28520, -31000, 
  -31000, -28373, -25745, -23118, -20490, -17863, -15235, -12608, -9980, -7353, -4726, -2098, 529, 3157, 5784, 8412, 11039, 13667, 16294, 18921, 21549, 24176, 26804, 29431, 29941, 27314, 24686, 22059, 19431, 16804, 14177, 11549, 8922, 6294, 3667, 1039, -1588, -4216, -6843, -9470, -12098, -14725, -17353, -19980, -22608, -25235, -27863, -30490, 
  -31000, -28216, -25433, -22649, -19865, -17082, -14298, -11514, -8731, -5947, -3163, -379, 2404, 5188, 7972, 10755, 13539, 16323, 19106, 21890, 24674, 27457, 30241, 28975, 26192, 23408, 20624, 17840, 15057, 12273, 9489, 6706, 3922, 1138, -1645, -4429, -7213, -9996, -12780, -15564, -18347, -21131, -23915, -26699, -29482, 





  31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, 
  31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, 
  31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, 
  31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000,
  31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, 
  31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, 31000, 
  31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, 
  31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, 31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, -31000, 

  -31000, -28684, -26372, -24065, -21769, -19485, -17218, -14970, -12744, -10543, -8372, -6231, -4126, -2057, -29, 1955, 3894, 5784, 7622, 9407, 11135, 12804, 14413, 15958, 17437, 18849, 20191, 21462, 22659, 23782, 24828, 25797, 26686, 27494, 28221, 28865, 29426, 29902, 30294, 30599, 30819, 30953, 31000, 30960, 30835, 30622, 30324, 29940, 29471, 28918, 28281, 27562, 26760, 25878, 24917, 23878, 22762, 21571, 20306, 18970, 17564, 16091, 14552, 12949, 11285, 9562, 7782, 5948, 4062, 2128, 147, -1877, -3942, -6044, -8181, -10351, -12549, -14772, -17019, -19285, -21567, -23862, -26168, -28480, -30796, 
  -31000, -28547, -26097, -23655, -21225, -18810, -16414, -14041, -11694, -9378, -7095, -4850, -2646, -487, 1625, 3686, 5692, 7641, 9529, 11354, 13113, 14802, 16420, 17963, 19430, 20818, 22124, 23347, 24486, 25537, 26500, 27372, 28153, 28842, 29437, 29937, 30342, 30650, 30862, 30977, 30995, 30916, 30740, 30467, 30098, 29633, 29073, 28420, 27673, 26834, 25904, 24886, 23780, 22588, 21312, 19954, 18516, 17001, 15411, 13747, 12014, 10214, 8348, 6422, 4436, 2395, 302, -1840, -4028, -6258, -8527, -10832, -13167, -15531, -17919, -20327, -22752, -25190, -27638, -30090, 
  -31000, -28401, -25806, -23221, -20649, -18095, -15564, -13061, -10588, -8152, -5756, -3404, -1101, 1150, 3344, 5478, 7547, 9549, 11480, 13336, 15114, 16811, 18423, 19949, 21385, 22730, 23979, 25132, 26187, 27141, 27992, 28740, 29383, 29920, 30349, 30671, 30884, 30989, 30984, 30870, 30648, 30317, 29879, 29333, 28682, 27925, 27065, 26103, 25040, 23879, 22621, 21269, 19825, 18292, 16672, 14968, 13184, 11322, 9385, 7377, 5302, 3163, 964, -1291, -3599, -5954, -8354, -10793, -13268, -15775, -18308, -20863, -23436, -26022, -28618, 
  -31000, -28246, -25498, -22761, -20039, -17340, -14667, -12027, -9424, -6864, -4351, -1891, 511, 2852, 5126, 7328, 9454, 11501, 13464, 15339, 17123, 18812, 20402, 21891, 23276, 24553, 25721, 26777, 27719, 28545, 29253, 29843, 30312, 30661, 30888, 30992, 30975, 30834, 30572, 30189, 29684, 29060, 28318, 27458, 26483, 25394, 24194, 22885, 21470, 19951, 18332, 16616, 14805, 12904, 10916, 8846, 6697, 4473, 2180, -179, -2599, -5075, -7602, -10175, -12789, -15439, -18120, -20827, -23553, -26294, -29045, 
  -31000, -28083, -25172, -22274, -19395, -16542, -13721, -10939, -8201, -5513, -2882, -313, 2188, 4615, 6964, 9228, 11404, 13485, 15468, 17348, 19121, 20782, 22329, 23758, 25066, 26249, 27306, 28233, 29029, 29692, 30221, 30614, 30871, 30991, 30973, 30818, 30526, 30098, 29534, 28836, 28006, 27045, 25955, 24740, 23400, 21941, 20364, 18673, 16872, 14965, 12956, 10850, 8651, 6365, 3995, 1548, -971, -3556, -6203, -8904, -11654, -14447, -17277, -20137, -23021, -25923, -28836, 
  -31000, -27909, -24826, -21759, -18714, -15700, -12724, -9793, -6915, -4098, -1346, 1331, 3928, 6438, 8855, 11173, 13386, 15489, 17476, 19342, 21084, 22696, 24174, 25515, 26716, 27773, 28684, 29447, 30059, 30520, 30827, 30981, 30981, 30826, 30518, 30057, 29444, 28681, 27769, 26711, 25510, 24168, 22689, 21077, 19335, 17468, 15480, 13377, 11163, 8845, 6428, 3917, 1320, -1358, -4109, -6928, -9806, -12737, -15713, -18727, -21772, -24840, -27923, 
  -31000, -27726, -24461, -21214, -17994, -14811, -11673, -8589, -5567, -2617, 254, 3039, 5728, 8314, 10791, 13152, 15389, 17496, 19469, 21300, 22985, 24520, 25900, 27121, 28180, 29074, 29800, 30356, 30741, 30954, 30994, 30861, 30555, 30077, 29429, 28613, 27630, 26483, 25176, 23712, 22095, 20331, 18423, 16377, 14199, 11894, 9470, 6934, 4291, 1549, -1283, -4198, -7188, -10244, -13358, -16522, -19726, -22961, -26219, -29490, 
  -31000, -27531, -24073, -20637, -17233, -13873, -10566, -7323, -4154, -1069, 1922, 4810, 7585, 10240, 12765, 15154, 17398, 19490, 21424, 23194, 24794, 26219, 27465, 28528, 29405, 30092, 30588, 30891, 31000, 30914, 30635, 30163, 29499, 28646, 27605, 26382, 24978, 23399, 21650, 19735, 17662, 15437, 13065, 10556, 7917, 5156, 2281, -698, -3771, -6931, -10165, -13465, -16819, -20218, -23651, -27107, -30575, 
  -31000, -27325, -23663, -20027, -16430, -12884, -9401, -5995, -2676, 543, 3651, 6638, 9492, 12203, 14763, 17162, 19391, 21443, 23311, 24988, 26468, 27746, 28818, 29679, 30327, 30759, 30974, 30971, 30751, 30313, 29659, 28793, 27716, 26432, 24947, 23265, 21392, 19335, 17101, 14698, 12134, 9418, 6561, 3571, 460, -2762, -6083, -9492, -12976, -16524, -20122, -23759, -27422, 
  -31000, -27107, -23229, -19382, -15581, -11841, -8176, -4602, -1131, 2221, 5443, 8520, 11442, 14196, 16772, 19159, 21348, 23331, 25099, 26646, 27966, 29052, 29902, 30511, 30878, 31000, 30878, 30511, 29902, 29052, 27966, 26646, 25099, 23331, 21348, 19159, 16772, 14196, 11442, 8520, 5443, 2221, -1131, -4602, -8176, -11841, -15581, -19382, -23229, -27107, -31000, 
  -31000, -26876, -22770, -18701, -14686, -10743, -6890, -3144, 479, 3962, 7291, 10449, 13425, 16203, 18772, 21121, 23239, 25117, 26746, 28120, 29231, 30076, 30650, 30951, 30978, 30730, 30209, 29416, 28356, 27033, 25453, 23623, 21551, 19246, 16719, 13980, 11042, 7917, 4621, 1166, -2431, -6154, -9988, -13914, -17916, -21977, -26077, -30199, 
  -31000, -26631, -22284, -17980, -13741, -9587, -5540, -1620, 2154, 5764, 9190, 12417, 15428, 18208, 20744, 23022, 25032, 26763, 28206, 29356, 30205, 30750, 30989, 30918, 30540, 29857, 28870, 27586, 26010, 24152, 22019, 19622, 16973, 14087, 10976, 7656, 4144, 457, -3386, -7366, -11464, -15659, -19930, -24257, -28616, 
};


const int16_t wave_lut_offset [] = {0, 755, 1510, 2256, 3020};
const String waveforms [] = {"SIN", "SAW", "TRG", "SQR", "CML"};

// Knob detection structure
class Knob {
  private:
    const int8_t increment [16] = {0, 1, -1, 2, -1, 0, 2, 1, 1, 2, 0, -1, 2, -1, 1, 0};
    int16_t *state;
    int16_t lowerLimit;
    int16_t upperLimit;
    int8_t selector;
    int8_t currentValue;
    int8_t previousValue;
    int8_t prevRotDir;
  public:
    int16_t count = 0;

    Knob (int16_t st[16], int16_t l, int16_t u, int8_t s){
      state = st;
      lowerLimit = l;
      count = (l+u)/2;
      upperLimit = u;
      selector = s;
    }

    void decode(const int8_t value){
      previousValue = currentValue;
      currentValue = value&selector;
      int16_t my_state = previousValue*100 + currentValue;

      for (int8_t i = 0; i < 17; i++){
        if(my_state == *(state+i)){
          if(increment[i] != 2){
            count += increment[i];
          } else {
            count += prevRotDir*2;
          }
          if(increment[i] == -1 || increment[i] == 1){prevRotDir == increment[i];}
          break;
        }
      }

      // Limiting values
      if(count > upperLimit){count = upperLimit;}
      if(count < lowerLimit){count = lowerLimit;}
    }
};

int16_t knob2_state[] = {0, 4, 8, 12, 400, 404, 408, 412, 800, 804, 808, 812, 1200, 1204, 1208, 1212};
Knob knob2_obj(knob2_state, 0, 32, 12);

int16_t knob3_state[] = {0, 1, 2, 3, 100, 101, 102, 103, 200, 201, 202, 203, 300, 301, 302, 303};
Knob knob3_obj(knob3_state, 2, 14, 3);
Knob knob0_obj(knob2_state, 2, 162, 12);
Knob knob1_obj(knob3_state, 0, 8, 3);

//Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value) {
      digitalWrite(REN_PIN,LOW);
      digitalWrite(RA0_PIN, bitIdx & 0x01);
      digitalWrite(RA1_PIN, bitIdx & 0x02);
      digitalWrite(RA2_PIN, bitIdx & 0x04);
      digitalWrite(OUT_PIN,value);
      digitalWrite(REN_PIN,HIGH);
      delayMicroseconds(2);
      digitalWrite(REN_PIN,LOW);
}

//Function to read collumns
uint8_t readCols(){
      uint8_t c0 = digitalRead(C0_PIN);
      uint8_t c1 = digitalRead(C1_PIN) << 1;
      uint8_t c2 = digitalRead(C2_PIN) << 2;
      uint8_t c3 = digitalRead(C3_PIN) << 3;

      return (c0 + c1 + c2 + c3);
}

void setRow(uint8_t rowIdx){
  //disable decoder
  digitalWrite(REN_PIN, LOW);

  
  //select the row
  switch (rowIdx){
    case 0:
      digitalWrite(RA0_PIN, LOW);
      digitalWrite(RA1_PIN, LOW);
      digitalWrite(RA2_PIN, LOW); 
      break;

    case 1:
      digitalWrite(RA0_PIN, HIGH);
      digitalWrite(RA1_PIN, LOW);
      digitalWrite(RA2_PIN, LOW); 
      break;

    case 2:
      digitalWrite(RA0_PIN, LOW);
      digitalWrite(RA1_PIN, HIGH);
      digitalWrite(RA2_PIN, LOW); 
      break;

    case 3:
      digitalWrite(RA0_PIN, HIGH);
      digitalWrite(RA1_PIN, HIGH);
      digitalWrite(RA2_PIN, LOW); 
      break;

    case 4:
      digitalWrite(RA0_PIN, LOW);
      digitalWrite(RA1_PIN, LOW);
      digitalWrite(RA2_PIN, HIGH); 
      break;

    case 5:
      digitalWrite(RA0_PIN, HIGH);
      digitalWrite(RA1_PIN, LOW);
      digitalWrite(RA2_PIN, HIGH); 
      break;

    case 6:
      digitalWrite(RA0_PIN, LOW);
      digitalWrite(RA1_PIN, HIGH);
      digitalWrite(RA2_PIN, HIGH); 
      break;

    default:
      Serial.println("Row address exceeds 3");
  }
  
  //enable decoder
  digitalWrite(REN_PIN, HIGH);

}

int8_t decodeKey(const int8_t bit0, const int8_t bit1, const int8_t bit2){
  int32_t value = bit0*10000 + bit1*100 + bit2;

  for(int8_t i = 0; i < 12; i++){
    if (stepSizeLUT[i] == value){
      return i;
    }
  }

  return 12;
}

volatile int8_t pressed_keys[4] = {12};
volatile int8_t pressed_octave[4] = {my_octave, my_octave, my_octave, my_octave};
volatile int8_t previous_pressed_keys[4] = {12};
volatile int8_t played_notes [4] = {12,12,12,12};
volatile int8_t played_notes2 [4] = {12,12,12,12};
volatile int8_t played_octave;
int8_t played_notes1[4] = {12, 12, 12, 12};
int8_t played_octave1 [4];
uint32_t c = 0;
const int16_t key_select [] = {256, 512, 1024, 2048, 16, 32, 64, 128, 1, 2, 4, 8};
const int16_t key_power [] = {8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};


void decodeMultipleKeys(const int8_t w0, const int8_t w1, const int8_t w2){
  int8_t index = 0;
  int16_t value = (w0 << 8) + (w1 << 4) + w2;

  // CAN message container
  uint8_t TX_Message[8] = {0};

  // previous press
  for(int8_t i = 0; i < 4; i++){
    previous_pressed_keys[i] = pressed_keys[i];
  }

  // Reset pressed keys
  for(int8_t i = 0; i < 4; i++){
    pressed_keys[i] = 12;
  }

  // Scan for new keys
  for (int8_t i = 0; i < 12; i++){
    if(index > 3){break;}
    if((value&key_select[i])>>key_power[i] == 0){
      pressed_keys[index] = i;
      index++;
    }
  }

  // Format message
  TX_Message[0] = pressed_keys[0];
  TX_Message[1] = pressed_keys[1];
  TX_Message[2] = pressed_keys[2];
  TX_Message[3] = pressed_keys[3];
  TX_Message[4] = my_octave;
  TX_Message[5] = my_octave;
  TX_Message[6] = my_octave;
  if (has_right) {
    TX_Message[7] = 0;
    ID = 0x123;
  } else if (has_left) {
    TX_Message[7] = 2;
    ID = 0x124;
  } else {
    TX_Message[7] = 1;
    ID = 0x123;
  }
  

  // Detect changes
  bool no_changes_detected = true;
  for (int8_t i = 0; i < 4; i++){
    no_changes_detected = no_changes_detected && (pressed_keys[i] == previous_pressed_keys[i]);
  }

  // Send message if change has been detected
  if(!no_changes_detected && !is_main){
    c++;
    xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
  }
  
}

void CAN_RX_ISR (void){
  uint8_t RX_Message_ISR[8];
  uint32_t IDR;
  CAN_RX(IDR, RX_Message_ISR);
  if (IDR == 0x123){
    xQueueSendFromISR(msgInQ, RX_Message_ISR, NULL);
  } else {
    xQueueSendFromISR(msgIn1Q, RX_Message_ISR, NULL);
  } 
}



void decodeTask(void * pvParameters){
  uint8_t RX_Message[8];
  while(1){
    xQueueReceive(msgInQ, RX_Message, portMAX_DELAY);
    played_notes[0] = RX_Message[0];
    played_notes[1] = RX_Message[1];
    played_notes[2] = RX_Message[2];
    played_notes[3] = RX_Message[3];
    played_octave = RX_Message[4];
    octave_modifier = RX_Message[7];
  }
}

void decodeTask1(void * pvParameters){
  uint8_t RX_Message[8];
  while(1){
    xQueueReceive(msgIn1Q, RX_Message, portMAX_DELAY);
    played_notes2[0] = RX_Message[0];
    played_notes2[1] = RX_Message[1];
    played_notes2[2] = RX_Message[2];
    played_notes2[3] = RX_Message[3];
    played_octave = RX_Message[4];
    octave_modifier1 = RX_Message[7];
  }
}

void CAN_TX_Task(void * pvParameters){
  uint8_t msgOut[8];
  while (1) {
    xQueueReceive(msgOutQ, msgOut, portMAX_DELAY);
    xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
    CAN_TX(ID, msgOut);
  }
}

void CAN_TX_ISR (void) {
  xSemaphoreGiveFromISR(CAN_TX_Semaphore,NULL);
}

void sampleISR (){
  static uint64_t time_prev = 0;
  time_prev = micros();
  
  static int32_t phaseAcc = 0;
  static uint16_t counter = 0;
  static uint16_t lenCount = 0;

  static uint16_t counter1 = 0;
  static uint16_t lenCount1 = 0;

  static uint16_t counter2 = 0;
  static uint16_t lenCount2 = 0;

  static uint16_t counter3 = 0;
  static uint16_t lenCount3 = 0;

  int16_t Vout = 0;
  int8_t scaler = 1;
  /*
    for (int8_t i = 0; i < 4; i++){
      if (pressed_keys[i] == 12){
        played_notes1[i] = played_notes[index];
        played_octave1[i] = my_octave-1+octave_modifier;
        index++;
      } else {
        played_notes1[i] = pressed_keys[index1];
        played_octave1[i] = my_octave;
        index1++;
      }
    }
  */
  int8_t index = 0;
  for (int8_t i = 0; i < 4; i++){
    played_notes1[i] = pressed_keys[i];
    played_octave1[i] = my_octave;
  }
  for (int8_t i = 0; i < 4; i++){
    if(played_notes1[i] == 12){
      played_notes1[i] = played_notes[index];
      played_octave1[i] = my_octave-1+octave_modifier;
      index++;
    }
  }
  index = 0;
  for (int8_t i = 0; i < 4; i++){
    if(played_notes1[i] == 12){
      played_notes1[i] = played_notes2[index];
      played_octave1[i] = my_octave-1+octave_modifier1;
      index++;
    }
  }



  if(played_notes1[0] != 12){
    phaseAcc = wave_lut[sine_lut_start_index[played_notes1[0]]+lenCount+wave_lut_offset[knob1_obj.count/2]];

    if(counter == oct_count[played_octave1[0]]){
      counter = 0;
      if(lenCount >= sine_lut_sizes[played_notes1[0]]){
      lenCount = 0;
      } else {
      lenCount+=oct_lenCount[played_octave1[0]];
      }
    } else {
    counter++;
    }
  } else {phaseAcc = 0; counter = 0; lenCount = 0;}
  
  if(played_notes1[1] != 12){
    phaseAcc = phaseAcc + wave_lut[sine_lut_start_index[played_notes1[1]]+lenCount1+wave_lut_offset[knob1_obj.count/2]];
    scaler++;
    if(counter1 == oct_count[played_octave1[1]]){
    counter1 = 0;
    if(lenCount1 >= sine_lut_sizes[played_notes1[1]]){
    lenCount1 = 0;
    } else {
    lenCount1+=oct_lenCount[played_octave1[1]];
    }
  } else {
    counter1++;
  }
  } else {counter1 = 0; lenCount1 = 0;}

  if(played_notes1[2] != 12){
    phaseAcc = phaseAcc + wave_lut[sine_lut_start_index[played_notes1[2]]+lenCount2+wave_lut_offset[knob1_obj.count/2]];
    scaler++;
    if(counter2 == oct_count[played_octave1[2]]){
    counter2 = 0;
    if(lenCount2 >= sine_lut_sizes[played_notes1[2]]){
    lenCount2 = 0;
    } else {
    lenCount2+=oct_lenCount[played_octave1[2]];
  }
  } else {
    counter2++;
  }
  } else {counter2 = 0; lenCount2 = 0;}

  if(played_notes1[3] != 12){
    phaseAcc = phaseAcc + wave_lut[sine_lut_start_index[played_notes1[3]]+lenCount3+wave_lut_offset[knob1_obj.count/2]];
    scaler++;
    if(counter3 == oct_count[played_octave1[3]]){
    counter3 = 0;
    if(lenCount3 >= sine_lut_sizes[played_notes1[3]]){
    lenCount3 = 0;
    } else {
    lenCount3+=oct_lenCount[played_octave1[3]];
  }
  } else {
    counter3++;
  }
  } else {counter3 = 0; lenCount3 = 0;}
  
  
  if (is_main){Vout = (phaseAcc/scaler) >> 8;}
  
  if (reverb_active){
  if (delayCounter < knob0_obj.count*50){
    delayCounter++;
    xQueueSendFromISR(DelayQ, &Vout, NULL);
  } else {
    int16_t del;
    xQueueReceiveFromISR(DelayQ, (void *) &del, NULL);
    Vout = Vout/2 + del/2;
    xQueueSendFromISR(DelayQ, &Vout, NULL);
  }
  } else {
    delayCounter = 0;
    if (xQueueIsQueueEmptyFromISR(DelayQ) == pdFALSE){
      int16_t del;
      xQueueReceiveFromISR(DelayQ, (void *) &del, NULL);
    }
  }

  Vout = Vout >> (8 - knob2_obj.count/4);
  analogWrite(OUTR_PIN, Vout + 130);
  time_delta1 = micros() - time_prev;
}

void scanKeysTask(void * pvParameters){
  static int8_t prev_val = 0;
  static int8_t cur_val = 0;

  const TickType_t xFrequency = 20/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();

  while (1){
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
    // keypress detection code

    xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
    prev_val = cur_val;
    for (int i = 0; i < 7; i++){
      // select the row to read
      setRow(i);
      delayMicroseconds(3);

      //record the value into the array
      keyArray[i] = readCols();
      
    }

    //currentIndex = decodeKey(keyArray[0], keyArray[1], keyArray[2]);
    decodeMultipleKeys(keyArray[0], keyArray[1], keyArray[2]); // Decoding keypress of multiple keys

    //Processing knobs
    knob2_obj.decode(keyArray[3]);
    knob3_obj.decode(keyArray[3]);
    my_octave = knob3_obj.count/2;
    knob1_obj.decode(keyArray[4]);
    knob0_obj.decode(keyArray[4]);
    reverb_count = knob0_obj.count/2;
    cur_val = keyArray[6];
    if (prev_val == 15 && cur_val == 14){
      reverb_active = !reverb_active;
    }
    xSemaphoreGive(keyArrayMutex);
  }
}

void handshake(){
  xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
  for (int i = 0; i < 7; i++){
      // select the row to read
      setRow(i);
      delayMicroseconds(3);

      //record the value into the array
      keyArray[i] = readCols();
      
  }

  if ((keyArray[5] == 7 && keyArray[6] == 7) || (keyArray[5] == 15 && keyArray[6] == 15)){
    is_main = true;
  } else {
    is_main = false;
  }

  if (keyArray[5] == 7){has_left = true;}
  if (keyArray[6] == 7){has_right = true;}

  xSemaphoreGive(keyArrayMutex);
}

void displayUpdateTask(void * pvParameters){
  const TickType_t xFrequency = 100/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();

  while(1){
    TickType_t xLastWakeTime = xTaskGetTickCount();
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.setCursor(5,10);
    u8g2.print("ViciSynth");
    u8g2.setCursor(5,20);
    if (reverb_active){u8g2.print("> Delay: " + String(knob0_obj.count/2));} else {u8g2.print("Delay: " + String(knob0_obj.count/2));}
    u8g2.setCursor(70,20);
    u8g2.print("Vol: " + String(knob2_obj.count/2));
    u8g2.setCursor(5,30);
    u8g2.print("Wave: " + waveforms[knob1_obj.count/2]);
    u8g2.setCursor(70,30);
    u8g2.print("Octave: " + String(knob3_obj.count/2));
    u8g2.setFont(u8g2_font_5x7_tr);
    u8g2.setCursor(70,10);
    u8g2.print(Notes[played_notes1[0]]);
    u8g2.setCursor(85,10);
    u8g2.print(Notes[played_notes1[1]]);
    u8g2.setCursor(100,10);
    u8g2.print(Notes[played_notes1[2]]);
    u8g2.setCursor(115,10);
    u8g2.print(Notes[played_notes1[3]]);
    u8g2.sendBuffer();
  }
}

void setup() {
  // put your setup code here, to run once:

  //Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);

  //Initialise display
  setOutMuxBit(DRST_BIT, LOW);  //Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH);  //Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH);  //Enable display power supply

  //Initialise UART
  Serial.begin(9600);
  Serial.println("Hello World");
  //Serial.println(String(played_notes[0]) + String(played_notes[1]) + String(played_notes[2]) + String(played_notes[3]));

  //Setup timer 2
  TIM_TypeDef *Instance2 = TIM1;
  HardwareTimer *sampleTimer2 = new HardwareTimer(Instance2);
  sampleTimer2->setOverflow(22000, HERTZ_FORMAT);
  sampleTimer2->attachInterrupt(sampleISR);
  sampleTimer2->resume();

  // Keyboard Scanning Thread intialisaation
  TaskHandle_t scanKeysHandle = NULL;
  xTaskCreate(
    scanKeysTask, // Function that implements the task
    "scanKeys", // Task name
    64, // Stack size in words
    NULL, // Parameter passed into the task
    5, // Task priority
    &scanKeysHandle // Pointer to store the task handle
  );


  // Decode Thread initialisation
  TaskHandle_t decodeHandle = NULL;
  xTaskCreate(
    decodeTask, // Function that implements the task
    "decode", // Task name
    64, // Stack size in words
    NULL, // Parameter passed into the task
    3, // Task priority
    &decodeHandle // Pointer to store the task handle
  );

  // Decode Thread initialisation
  TaskHandle_t decodeHandle1 = NULL;
  xTaskCreate(
    decodeTask1, // Function that implements the task
    "decode1", // Task name
    64, // Stack size in words
    NULL, // Parameter passed into the task
    4, // Task priority
    &decodeHandle1 // Pointer to store the task handle
  );

  TaskHandle_t TX_Handle = NULL;
  xTaskCreate(
    CAN_TX_Task, // Function that implements the task
    "TX", // Task name
    64, // Stack size in words
    NULL, // Parameter passed into the task
    2, // Task priority
    &TX_Handle // Pointer to store the task handle
  );

  // Display Updating Thread intialisaation
  TaskHandle_t displayUpdateHandle = NULL;
  xTaskCreate(
    displayUpdateTask, // Function that implements the task
    "displayUpdate", // Task name
    256, // Stack size in words
    NULL, // Parameter passed into the task
    1, // Task priority
    &displayUpdateHandle // Pointer to store the task handle
  );

  // Creating Key Array mutex
  keyArrayMutex = xSemaphoreCreateMutex();
  CAN_TX_Semaphore = xSemaphoreCreateCounting(3,3);

  // Handshake
  handshake();

  // Start the CAN communication
  CAN_Init(false);
  CAN_RegisterRX_ISR(CAN_RX_ISR);
  CAN_RegisterTX_ISR(CAN_TX_ISR);
  setCANFilter();
  CAN_Start();

  // Initialise the receive queue
  msgInQ = xQueueCreate(36, 8);
  msgIn1Q = xQueueCreate(36, 8);
  msgOutQ = xQueueCreate(36, 8);
  DelayQ = xQueueCreate(8192, sizeof(int16_t));

  // Start the tasks
  vTaskStartScheduler();
}

void loop() {
 // Empty loop

}

