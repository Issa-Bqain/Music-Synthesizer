#include <Arduino.h>
#include <U8g2lib.h>
#include <STM32FreeRTOS.h>
#include <ES_CAN.h>

#define FIFO_SIZE 4096
#define FIFO1_SIZE 64
int32_t delayCounter = 0;

//FIFO
class FIFO {
  private:
    int head;
    int tail;
    int numElements;
    int32_t buffer[FIFO_SIZE];

  public:
    FIFO();
    ~FIFO();
    void push(int32_t data);
    int32_t pop();
    int size();
    
};

FIFO::FIFO() {
  head = 0;
  tail = 0;
  numElements = 0;
}

FIFO::~FIFO() {
}

void FIFO::push(int32_t data) {
  if(numElements == FIFO_SIZE) {
//    Serial.println(F("Buffer full"));
    return;
  }
  else {
    //Increment size
    numElements++;

    //Only move the tail if there is more than one element
    if(numElements > 1) {
      //Increment tail location
      tail++;

      //Make sure tail is within the bounds of the array
      tail %= FIFO_SIZE;
    }
  
    //Store data into array
    buffer[tail] = data;
  }
}

int32_t FIFO::pop() {
  if(numElements == 0) {
//    Serial.println(F("Buffer empty"));
    return 0;
  }
  else {
    //Decrement size
    numElements--;

    int32_t data = buffer[head];

    if(numElements >= 1) {
      //Move head up one position
      head++;

      //Make sure head is within the bounds of the array
      head %= FIFO_SIZE;
    }

    return data;
  }
}

int FIFO::size() {
  return numElements;
}

//FIFO1
class FIFO1 {
  private:
    int head;
    int tail;
    int numElements;
    int32_t buffer[FIFO1_SIZE];

  public:
    FIFO1();
    ~FIFO1();
    void push(int32_t data);
    int32_t pop();
    int size();
    
};

FIFO1::FIFO1() {
  head = 0;
  tail = 0;
  numElements = 0;
}

FIFO1::~FIFO1() {
}

void FIFO1::push(int32_t data) {
  if(numElements == FIFO1_SIZE) {
//    Serial.println(F("Buffer full"));
    return;
  }
  else {
    //Increment size
    numElements++;

    //Only move the tail if there is more than one element
    if(numElements > 1) {
      //Increment tail location
      tail++;

      //Make sure tail is within the bounds of the array
      tail %= FIFO1_SIZE;
    }
  
    //Store data into array
    buffer[tail] = data;
  }
}

int32_t FIFO1::pop() {
  if(numElements == 0) {
//    Serial.println(F("Buffer empty"));
    return 0;
  }
  else {
    //Decrement size
    numElements--;

    int32_t data = buffer[head];

    if(numElements >= 1) {
      //Move head up one position
      head++;

      //Make sure head is within the bounds of the array
      head %= FIFO1_SIZE;
    }

    return data;
  }
}

int FIFO1::size() {
  return numElements;
}

//Constants
  const uint32_t interval = 100; //Display update interval

// Main keyboard bool
  bool is_main = true;
  volatile int8_t my_octave = 4;
  volatile int8_t octave_modifier = 1;
  volatile bool reverb_active = false;
  volatile int8_t reverb_count = 0;
  

//handshake
bool has_left = false;
bool has_right = false;

//Pin definitions
  //Row select and enable
  const int RA0_PIN = D3;
  const int RA1_PIN = D6;
  const int RA2_PIN = D12;
  const int REN_PIN = A5;

  //Matrix input and output
  const int C0_PIN = A2;
  const int C1_PIN = D9;
  const int C2_PIN = A6;
  const int C3_PIN = D1;
  const int OUT_PIN = D11;

  //Audio analogue out
  const int OUTL_PIN = A4;
  const int OUTR_PIN = A3;

  //Joystick analogue in
  const int JOYY_PIN = A0;
  const int JOYX_PIN = A1;

  //Output multiplexer bits
  const int DEN_BIT = 3;
  const int DRST_BIT = 4;
  const int HKOW_BIT = 5;
  const int HKOE_BIT = 6;

//Display driver object
U8G2_SSD1305_128X32_NONAME_F_HW_I2C u8g2(U8G2_R0);

// Mutex
static uint8_t keyArray[7];
SemaphoreHandle_t keyArrayMutex;
SemaphoreHandle_t CAN_TX_Semaphore;

// CAN queue handler
QueueHandle_t msgInQ;
QueueHandle_t msgOutQ;

// Sample queue handler
QueueHandle_t SampleQ;
uint64_t time_delta = 0;


// waveform generation
volatile int16_t currentIndex;
const int32_t stepSizes [] = {51076922, 54112683, 57330004, 60740598, 64352275, 68178701, 72231588, 76528508, 81077269, 85899346, 91006452, 96418111, 0};
const int32_t stepSizeLUT [] = {141515, 131515, 111515, 71515, 151415, 151315, 151115, 150715, 151514, 151513, 151511, 151507};
const String Notes [] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "--"};
const double frequencies [] = {261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392, 415.3, 440, 466.16, 493.88, 0};

//Octave recognition
const int8_t oct_count [] =    {5,4,3,2,1,0,0,0,0};
const int8_t oct_lenCount [] = {1,1,1,1,1,1,2,3,4};

// sinewave lookup tables
const int16_t sine_lut_sizes [] = {84, 79, 74, 70, 66, 62, 59, 56, 52, 50, 47, 44, 0};

const int16_t sine_lut_start_index [] = {0, 85, 165, 240, 311, 378, 441, 501, 558, 611, 662, 710, 0};

const int32_t wave_lut [] = {
  0, 160277503, 319660547, 477259667, 632195353, 783602956, 930637519, 1072478488, 1208334295, 1337446771, 1459095380, 1572601240, 1677330910, 1772699927, 1858176067, 1933282315, 1997599527, 2050768768, 2092493318, 2122540325, 2140742107, 2146997085, 2141270352, 2123593867, 2094066277, 2052852367, 2000182137, 1936349524, 1861710758, 1776682373, 1681738886, 1577410148, 1464278383, 1342974943, 1214176786, 1078602693, 937009259, 790186674, 638954307, 484156138, 326656047, 167332992, 7076105, -153220272, -312661575, -470358013, -625429531, -777010726, -924255669, -1066342635, -1202478679, -1331904071, -1453896528, -1567775249, -1672904713, -1768698225, -1854621192, -1930194106, -1994995218, -2048662893, -2090897629, -2121463727, -2140190608, -2146973763, -2141775337, -2124624342, -2095616490, -2054913667, -2002743020, -1939395700, -1865225225, -1780645520, -1686128596, -1582201922, -1469445479, -1348488527, -1220006088, -1084715181, -943370821, -796761808, -645706320, -491047349, -333647998, -174386664, -14152133,
  0, 169784261, 338505093, 505105726, 668542671, 827792254, 981857030, 1129772024, 1270610786, 1403491181, 1527580926, 1642102794, 1746339487, 1839638127, 1921414346, 1991155945, 2048426104, 2092866115, 2124197633, 2142224414, 2146833550, 2137996172, 2115767631, 2080287155, 2031776973, 1970540923, 1896962554, 1811502716, 1714696681, 1607150786, 1489538634, 1362596880, 1227120614, 1083958379, 934006860, 778205267, 617529450, 452985787, 285604886, 116435122, -53463923, -223028102, -391195362, -556912403, -719141269, -876865853, -1029098261, -1174884996, -1313312937, -1443515051, -1564675827, -1676036387, -1776899230, -1866632613, -1944674496, -2010536072, -2063804822, -2104147100, -2131310228, -2145124070, -2145502105, -2132441965, -2106025451, -2066418021, -2013867753, -1948703791, -1871334284, -1782243829, -1681990437, -1571202038, -1450572545, -1320857510, -1182869394, -1037472473, -885577429, -728135644, -566133242, -400584911, -232527550, -63013772,
  0, 179855932, 358447495, 534519206, 706833299, 874178421, 1035378153, 1189299277, 1334859741, 1471036270, 1596871555, 1711480987, 1814058872, 1903884098, 1980325202, 2042844810, 2091003416, 2124462470, 2142986756, 2146446052, 2134816039, 2108178474, 2066720618, 2010733915, 1940611946, 1856847661, 1760029916, 1650839331, 1530043503, 1398491618, 1257108470, 1106887971, 948886157, 784213763, 614028423, 439526522, 261934792, 82501685, -97511401, -276838990, -454220429, -628408741, -798179401, -962338936, -1119733321, -1269256088, -1409856108, -1540544974, -1660403958, -1768590462, -1864343945, -1946991269, -2015951433, -2070739651, -2110970770, -2136361967, -2146734745, -2142016184, -2122239456, -2087543588, -2038172490, -1974473236, -1896893625, -1805979034, -1702368584, -1586790647, -1460057725, -1323060737, -1176762760, -1022192254, -860435834, -692630634, -519956306, -343626736, -164881503,
  0, 190528282, 379553173, 565583145, 747150304, 922821966, 1091211970, 1250991610, 1400900122, 1539754632, 1666459489, 1780014909, 1879524868, 1964204168, 2033384635, 2086520390, 2123192158, 2143110576, 2146118474, 2132192119, 2101441397, 2054108952, 1990568268, 1911320721, 1816991625, 1708325297, 1586179185, 1451517100, 1305401612, 1148985667, 983503486, 810260831, 630624697, 446012529, 257881035, 67714695, -122985958, -312716173, -499978856, -683296385, -861222266, -1032352550, -1195336909, -1348889292, -1491798071, -1622935605, -1741267134, -1845858946, -1935885745, -2010637161, -2069523358, -2112079686, -2137970348, -2146991050, -2139070613, -2114271534, -2072789494, -2014951813, -1941214867, -1852160488, -1748491373, -1631025537, -1500689862, -1358512779, -1205616158, -1043206450, -872565173, -695038796, -512028116, -324977205, -135362016,
  0, 201824677, 401861956, 598340268, 789519563, 973706721, 1149270545, 1314656207, 1468399020, 1609137409, 1735624966, 1846741495, 1941502924, 2019070030, 2078755862, 2120031832, 2142532392, 2146058271, 2130578245, 2096229407, 2043315958, 1972306508, 1883829933, 1778669796, 1657757416, 1522163618, 1373089245, 1211854529, 1039887396, 858710820, 669929335, 475214827, 276291725, 74921730, -127111787, -328019577, -526022362, -719366592, -906339972, -1085286631, -1254621783, -1412845762, -1558557307, -1690465968, -1807403537, -1908334391, -1992364669, -2058750180, -2106903004, -2136396688, -2146970032, -2138529395, -2111149530, -2065072917, -2000707621, -1918623673, -1819548023, -1704358106, -1574074065, -1429849720, -1272962351, -1104801382, -926856078, -740702359, -547988837, -350422220, -149752197,
  0, 213786597, 425448199, 632880933, 834022961, 1026874972, 1209520058, 1380142762, 1537047131, 1678673568, 1803614334, 1910627545, 1998649511, 2066805312, 2114417492, 2141012798, 2146326876, 2130306907, 2093112125, 2035112239, 1956883755, 1859204250, 1743044636, 1609559517, 1460075707, 1296079045, 1119199624, 931195589, 733935661, 529380563, 319563531, 106570104, -107482609, -320466966, -530265948, -734794195, -932018739, -1119979208, -1296807314, -1460745422, -1610164021, -1743577921, -1859661014, -1957259459, -2035403148, -2093315348, -2130420424, -2146349558, -2140944420, -2114258734, -2066557751, -1998315608, -1910210620, -1803118530, -1678103813, -1536409090, -1379442775, -1208765083, -1026072515, -833180997, -632007831, -424552637, -212877477,
  0, 226449153, 450372146, 669270999, 880703780, 1082311843, 1271846144, 1447192328, 1606394314, 1747676121, 1869461675, 1970392393, 2049342340, 2105430787, 2138032039, 2146782410, 2131584286, 2092607210, 2030285991, 1945315857, 1838644694, 1711462475, 1565187985, 1401452994, 1222084053, 1029082116, 824600223, 610919478, 390423602, 165572344, -61125961, -287142374, -509955561, -727079924, -936093325, -1134664110, -1320577114, -1491758382, -1646298294, -1782472877, -1898763030, -1993871475, -2066737228, -2116547432, -2142746428, -2145041952, -2123408397, -2078087096, -2009583633, -1918662199, -1806337072, -1673861298, -1522712714, -1354577463, -1171331183, -975018083, -767828139, -552072666, -330158530, -104561300,
  0, 239865443, 476727574, 707620684, 929653801, 1140046888, 1336165651, 1515554522, 1675967404, 1815395796, 1932093940, 2024600681, 2091757756, 2132724304, 2146987391, 2134368431, 2095025423, 2029450975, 1938466132, 1823210100, 1685125978, 1525942694, 1347653353, 1152490284, 942897089, 721498047, 491065257, 254483926, 14716247, -225235691, -462367494, -693710075, -916366836, -1127549931, -1324615173, -1505095145, -1666730088, -1807496200, -1925630974, -2019655266, -2088391812, -2130979977, -2146886520, -2135912280, -2098194661, -2034205921, -1944747250, -1830938745, -1694205381, -1536259174, -1359077738, -1164879532, -956096077, -735341513, -505379868, -269090452, -29431803,
  0, 254057720, 504545495, 747943546, 980831714, 1199937525, 1402182166, 1584723758, 1744997278, 1880750610, 1990076190, 2071437805, 2123692186, 2146105071, 2138361520, 2100570343, 2033262570, 1937383991, 1814281864, 1665685982, 1493684371, 1300693948, 1089426557, 862850865, 624150647, 376680048, 123916452, -130588381, -383258225, -630542637, -868966851, -1095180598, -1306005190, -1498478181, -1669895000, -1817846945, -1940255042, -2035399246, -2101942620, -2138950115, -2145901714, -2122699734, -2069670204, -1987558277, -1877517768, -1741094932, -1580206743, -1397113955, -1194389333, -974881504, -741674928, -498046554, -247419777,
  0, 269090452, 533937188, 790363415, 1034325138, 1261974937, 1469722636, 1654291932, 1812772056, 1942663682, 2041918340, 2108970727, 2142763386, 2142763386, 2108970727, 2041918340, 1942663682, 1812772056, 1654291932, 1469722636, 1261974937, 1034325138, 790363415, 533937188, 269090452, 0, -269090452, -533937188, -790363415, -1034325138, -1261974937, -1469722636, -1654291932, -1812772056, -1942663682, -2041918340, -2108970727, -2142763386, -2142763386, -2108970727, -2041918340, -1942663682, -1812772056, -1654291932, -1469722636, -1261974937, -1034325138, -790363415, -533937188, -269090452, 0,
  0, 284997142, 564950189, 834904319, 1090081679, 1325965946, 1538382262, 1723571123, 1878254914, 1999695924, 2085744800, 2134878582, 2146227664, 2119591180, 2055440564, 1954911201, 1819782338, 1652445586, 1455862599, 1233512651, 989331060, 727639538, 453069700, 170481090, -115124823, -398693170, -675205142, -939766822, -1187695796, -1414604029, -1616475527, -1789737414, -1931323172, -2038726906, -2110047706, -2144023281, -2140052305, -2098205061, -2019222191, -1904501596, -1756073687, -1576565454, -1369153969, -1137510159, -885733832, -618281115, -339885590, -55474512,
  0, 301835017, 597674793, 881643166, 1148099773, 1391752082, 1607760513, 1791834567, 1940318046, 2050261676, 2119481686, 2146603182, 2131087461, 2073242705, 1974217865, 1835979835, 1661274389, 1453571639, 1216997111, 956249801, 676508841, 383330625, 82538449, -219893159, -517957108, -805733057, -1077505017, -1327874877, -1551869629, -1745040145, -1903549548, -2024249421, -2104742345, -2143429519, -2139542512, -2093158531, -2005198885, -1877410684, -1712332141, -1513242152, -1284095170, -1029442662, -754342699, -464259494, -164954868,

  -2147483647, -2096406725, -2045329802, -1994252880, -1943175957, -1892099035, -1841022113, -1789945190, -1738868268, -1687791345, -1636714423, -1585637500, -1534560578, -1483483656, -1432406733, -1381329811, -1330252888, -1279175966, -1228099044, -1177022121, -1125945199, -1074868276, -1023791354, -972714431, -921637509, -870560587, -819483664, -768406742, -717329819, -666252897, -615175975, -564099052, -513022130, -461945207, -410868285, -359791362, -308714440, -257637518, -206560595, -155483673, -104406750, -53329828, -2252906, 48824017, 99900939, 150977862, 202054784, 253131707, 304208629, 355285551, 406362474, 457439396, 508516319, 559593241, 610670163, 661747086, 712824008, 763900931, 814977853, 866054775, 917131698, 968208620, 1019285543, 1070362465, 1121439388, 1172516310, 1223593232, 1274670155, 1325747077, 1376824000, 1427900922, 1478977844, 1530054767, 1581131689, 1632208612, 1683285534, 1734362457, 1785439379, 1836516301, 1887593224, 1938670146, 1989747069, 2040823991, 2091900913, 2142977836,
  -2147483647, -2093370964, -2039258280, -1985145597, -1931032913, -1876920230, -1822807547, -1768694863, -1714582180, -1660469497, -1606356813, -1552244130, -1498131446, -1444018763, -1389906080, -1335793396, -1281680713, -1227568029, -1173455346, -1119342663, -1065229979, -1011117296, -957004612, -902891929, -848779246, -794666562, -740553879, -686441196, -632328512, -578215829, -524103145, -469990462, -415877779, -361765095, -307652412, -253539728, -199427045, -145314362, -91201678, -37088995, 17023689, 71136372, 125249055, 179361739, 233474422, 287587105, 341699789, 395812472, 449925156, 504037839, 558150522, 612263206, 666375889, 720488573, 774601256, 828713939, 882826623, 936939306, 991051990, 1045164673, 1099277356, 1153390040, 1207502723, 1261615406, 1315728090, 1369840773, 1423953457, 1478066140, 1532178823, 1586291507, 1640404190, 1694516874, 1748629557, 1802742240, 1856854924, 1910967607, 1965080291, 2019192974, 2073305657, 2127418341,
  -2147483647, -2090153643, -2032823638, -1975493634, -1918163630, -1860833625, -1803503621, -1746173617, -1688843612, -1631513608, -1574183604, -1516853599, -1459523595, -1402193591, -1344863586, -1287533582, -1230203578, -1172873573, -1115543569, -1058213564, -1000883560, -943553556, -886223551, -828893547, -771563543, -714233538, -656903534, -599573530, -542243525, -484913521, -427583517, -370253512, -312923508, -255593504, -198263499, -140933495, -83603491, -26273486, 31056518, 88386522, 145716527, 203046531, 260376535, 317706540, 375036544, 432366548, 489696553, 547026557, 604356561, 661686566, 719016570, 776346575, 833676579, 891006583, 948336588, 1005666592, 1062996596, 1120326601, 1177656605, 1234986609, 1292316614, 1349646618, 1406976622, 1464306627, 1521636631, 1578966635, 1636296640, 1693626644, 1750956648, 1808286653, 1865616657, 1922946661, 1980276666, 2037606670, 2094936674,
  -2147483647, -2086743048, -2026002449, -1965261851, -1904521252, -1843780653, -1783040054, -1722299455, -1661558856, -1600818258, -1540077659, -1479337060, -1418596461, -1357855862, -1297115263, -1236374665, -1175634066, -1114893467, -1054152868, -993412269, -932671670, -871931072, -811190473, -750449874, -689709275, -628968676, -568228078, -507487479, -446746880, -386006281, -325265682, -264525083, -203784485, -143043886, -82303287, -21562688, 39177911, 99918510, 160659108, 221399707, 282140306, 342880905, 403621504, 464362103, 525102701, 585843300, 646583899, 707324498, 768065097, 828805695, 889546294, 950286893, 1011027492, 1071768091, 1132508690, 1193249288, 1253989887, 1314730486, 1375471085, 1436211684, 1496952283, 1557692881, 1618433480, 1679174079, 1739914678, 1800655277, 1861395876, 1922136474, 1982877073, 2043617672, 2104358271,
  -2147483647, -2083131371, -2018779095, -1954426819, -1890074544, -1825722268, -1761369992, -1697017716, -1632665440, -1568313164, -1503960888, -1439608612, -1375256337, -1310904061, -1246551785, -1182199509, -1117847233, -1053494957, -989142681, -924790405, -860438130, -796085854, -731733578, -667381302, -603029026, -538676750, -474324474, -409972199, -345619923, -281267647, -216915371, -152563095, -88210819, -23858543, 40493733, 104846008, 169198284, 233550560, 297902836, 362255112, 426607388, 490959664, 555311940, 619664215, 684016491, 748368767, 812721043, 877073319, 941425595, 1005777871, 1070130146, 1134482422, 1198834698, 1263186974, 1327539250, 1391891526, 1456243802, 1520596078, 1584948353, 1649300629, 1713652905, 1778005181, 1842357457, 1906709733, 1971062009, 2035414284, 2099766560,
  -2147483647, -2079304946, -2011126244, -1942947543, -1874768842, -1806590141, -1738411439, -1670232738, -1602054037, -1533875336, -1465696634, -1397517933, -1329339232, -1261160530, -1192981829, -1124803128, -1056624427, -988445725, -920267024, -852088323, -783909621, -715730920, -647552219, -579373518, -511194816, -443016115, -374837414, -306658713, -238480011, -170301310, -102122609, -33943907, 34234794, 102413495, 170592196, 238770898, 306949599, 375128300, 443307002, 511485703, 579664404, 647843105, 716021807, 784200508, 852379209, 920557910, 988736612, 1056915313, 1125094014, 1193272716, 1261451417, 1329630118, 1397808819, 1465987521, 1534166222, 1602344923, 1670523624, 1738702326, 1806881027, 1875059728, 1943238430, 2011417131, 2079595832,
  -2147483647, -2075252058, -2003020470, -1930788881, -1858557293, -1786325704, -1714094115, -1641862527, -1569630938, -1497399350, -1425167761, -1352936172, -1280704584, -1208472995, -1136241407, -1064009818, -991778229, -919546641, -847315052, -775083464, -702851875, -630620286, -558388698, -486157109, -413925521, -341693932, -269462344, -197230755, -124999166, -52767578, 19464011, 91695599, 163927188, 236158777, 308390365, 380621954, 452853542, 525085131, 597316720, 669548308, 741779897, 814011485, 886243074, 958474663, 1030706251, 1102937840, 1175169428, 1247401017, 1319632606, 1391864194, 1464095783, 1536327371, 1608558960, 1680790549, 1753022137, 1825253726, 1897485314, 1969716903, 2041948492, 2114180080,
  -2147483647, -2070955139, -1994426631, -1917898123, -1841369614, -1764841106, -1688312598, -1611784090, -1535255582, -1458727074, -1382198566, -1305670057, -1229141549, -1152613041, -1076084533, -999556025, -923027517, -846499008, -769970500, -693441992, -616913484, -540384976, -463856468, -387327960, -310799451, -234270943, -157742435, -81213927, -4685419, 71843089, 148371597, 224900106, 301428614, 377957122, 454485630, 531014138, 607542646, 684071154, 760599663, 837128171, 913656679, 990185187, 1066713695, 1143242203, 1219770711, 1296299220, 1372827728, 1449356236, 1525884744, 1602413252, 1678941760, 1755470269, 1831998777, 1908527285, 1985055793, 2061584301, 2138112809,
  -2147483647, -2066406378, -1985329109, -1904251840, -1823174571, -1742097302, -1661020033, -1579942764, -1498865495, -1417788226, -1336710957, -1255633688, -1174556419, -1093479150, -1012401882, -931324613, -850247344, -769170075, -688092806, -607015537, -525938268, -444860999, -363783730, -282706461, -201629192, -120551923, -39474654, 41602615, 122679884, 203757153, 284834422, 365911691, 446988960, 528066229, 609143498, 690220767, 771298036, 852375305, 933452574, 1014529843, 1095607112, 1176684381, 1257761649, 1338838918, 1419916187, 1500993456, 1582070725, 1663147994, 1744225263, 1825302532, 1906379801, 1987457070, 2068534339,
  -2147483647, -2061584301, -1975684955, -1889785609, -1803886263, -1717986918, -1632087572, -1546188226, -1460288880, -1374389534, -1288490188, -1202590842, -1116691496, -1030792151, -944892805, -858993459, -773094113, -687194767, -601295421, -515396075, -429496729, -343597384, -257698038, -171798692, -85899346, 0, 85899346, 171798692, 257698038, 343597384, 429496729, 515396075, 601295421, 687194767, 773094113, 858993459, 944892805, 1030792151, 1116691496, 1202590842, 1288490188, 1374389534, 1460288880, 1546188226, 1632087572, 1717986918, 1803886263, 1889785609, 1975684955, 2061584301, -2147483647,
  -2147483647, -2056477195, -1965470742, -1874464290, -1783457837, -1692451385, -1601444932, -1510438480, -1419432027, -1328425575, -1237419123, -1146412670, -1055406218, -964399765, -873393313, -782386860, -691380408, -600373955, -509367503, -418361051, -327354598, -236348146, -145341693, -54335241, 36671212, 127677664, 218684117, 309690569, 400697021, 491703474, 582709926, 673716379, 764722831, 855729284, 946735736, 1037742189, 1128748641, 1219755093, 1310761546, 1401767998, 1492774451, 1583780903, 1674787356, 1765793808, 1856800261, 1947806713, 2038813165, 2129819618,
  -2147483647, -2051065536, -1954647425, -1858229313, -1761811202, -1665393091, -1568974980, -1472556868, -1376138757, -1279720646, -1183302535, -1086884423, -990466312, -894048201, -797630090, -701211978, -604793867, -508375756, -411957645, -315539534, -219121422, -122703311, -26285200, 70132911, 166551023, 262969134, 359387245, 455805356, 552223468, 648641579, 745059690, 841477801, 937895913, 1034314024, 1130732135, 1227150246, 1323568357, 1419986469, 1516404580, 1612822691, 1709240802, 1805658914, 1902077025, 1998495136, 2094913247,

  -2147483647, -2045329802, -1943175957, -1841022113, -1738868268, -1636714423, -1534560578, -1432406733, -1330252888, -1228099044, -1125945199, -1023791354, -921637509, -819483664, -717329819, -615175975, -513022130, -410868285, -308714440, -206560595, -104406750, -2252906, 99900939, 202054784, 304208629, 406362474, 508516319, 610670163, 712824008, 814977853, 917131698, 1019285543, 1121439388, 1223593232, 1325747077, 1427900922, 1530054767, 1632208612, 1734362457, 1836516301, 1938670146, 2040823991, 2142977836, 2049835613, 1947681768, 1845527924, 1743374079, 1641220234, 1539066389, 1436912544, 1334758700, 1232604855, 1130451010, 1028297165, 926143320, 823989475, 721835631, 619681786, 517527941, 415374096, 313220251, 211066406, 108912562, 6758717, -95395128, -197548973, -299702818, -401856663, -504010507, -606164352, -708318197, -810472042, -912625887, -1014779732, -1116933576, -1219087421, -1321241266, -1423395111, -1525548956, -1627702801, -1729856645, -1832010490, -1934164335, -2036318180, -2138472025,
  -2147483647, -2039258280, -1931032913, -1822807547, -1714582180, -1606356813, -1498131446, -1389906080, -1281680713, -1173455346, -1065229979, -957004612, -848779246, -740553879, -632328512, -524103145, -415877779, -307652412, -199427045, -91201678, 17023689, 125249055, 233474422, 341699789, 449925156, 558150522, 666375889, 774601256, 882826623, 991051990, 1099277356, 1207502723, 1315728090, 1423953457, 1532178823, 1640404190, 1748629557, 1856854924, 1965080291, 2073305657, 2113436270, 2005210903, 1896985536, 1788760170, 1680534803, 1572309436, 1464084069, 1355858702, 1247633336, 1139407969, 1031182602, 922957235, 814731869, 706506502, 598281135, 490055768, 381830401, 273605035, 165379668, 57154301, -51071066, -159296432, -267521799, -375747166, -483972533, -592197900, -700423266, -808648633, -916874000, -1025099367, -1133324733, -1241550100, -1349775467, -1458000834, -1566226201, -1674451567, -1782676934, -1890902301, -1999127668, -2107353034,
  -2147483647, -2032823638, -1918163630, -1803503621, -1688843612, -1574183604, -1459523595, -1344863586, -1230203578, -1115543569, -1000883560, -886223551, -771563543, -656903534, -542243525, -427583517, -312923508, -198263499, -83603491, 31056518, 145716527, 260376535, 375036544, 489696553, 604356561, 719016570, 833676579, 948336588, 1062996596, 1177656605, 1292316614, 1406976622, 1521636631, 1636296640, 1750956648, 1865616657, 1980276666, 2094936674, 2085370611, 1970710602, 1856050594, 1741390585, 1626730576, 1512070567, 1397410559, 1282750550, 1168090541, 1053430533, 938770524, 824110515, 709450507, 594790498, 480130489, 365470481, 250810472, 136150463, 21490455, -93169554, -207829563, -322489572, -437149580, -551809589, -666469598, -781129606, -895789615, -1010449624, -1125109632, -1239769641, -1354429650, -1469089658, -1583749667, -1698409676, -1813069684, -1927729693, -2042389702,
  -2147483647, -2026002449, -1904521252, -1783040054, -1661558856, -1540077659, -1418596461, -1297115263, -1175634066, -1054152868, -932671670, -811190473, -689709275, -568228078, -446746880, -325265682, -203784485, -82303287, 39177911, 160659108, 282140306, 403621504, 525102701, 646583899, 768065097, 889546294, 1011027492, 1132508690, 1253989887, 1375471085, 1496952283, 1618433480, 1739914678, 1861395876, 1982877073, 2104358271, 2069127825, 1947646628, 1826165430, 1704684233, 1583203035, 1461721837, 1340240640, 1218759442, 1097278244, 975797047, 854315849, 732834651, 611353454, 489872256, 368391058, 246909861, 125428663, 3947465, -117533732, -239014930, -360496128, -481977325, -603458523, -724939721, -846420918, -967902116, -1089383313, -1210864511, -1332345709, -1453826906, -1575308104, -1696789302, -1818270499, -1939751697, -2061232895,
  -2147483647, -2018779095, -1890074544, -1761369992, -1632665440, -1503960888, -1375256337, -1246551785, -1117847233, -989142681, -860438130, -731733578, -603029026, -474324474, -345619923, -216915371, -88210819, 40493733, 169198284, 297902836, 426607388, 555311940, 684016491, 812721043, 941425595, 1070130146, 1198834698, 1327539250, 1456243802, 1584948353, 1713652905, 1842357457, 1971062009, 2099766560, 2066496182, 1937791630, 1809087078, 1680382527, 1551677975, 1422973423, 1294268871, 1165564320, 1036859768, 908155216, 779450665, 650746113, 522041561, 393337009, 264632458, 135927906, 7223354, -121481198, -250185749, -378890301, -507594853, -636299405, -765003956, -893708508, -1022413060, -1151117612, -1279822163, -1408526715, -1537231267, -1665935819, -1794640370, -1923344922, -2052049474,
  -2147483647, -2011126244, -1874768842, -1738411439, -1602054037, -1465696634, -1329339232, -1192981829, -1056624427, -920267024, -783909621, -647552219, -511194816, -374837414, -238480011, -102122609, 34234794, 170592196, 306949599, 443307002, 579664404, 716021807, 852379209, 988736612, 1125094014, 1261451417, 1397808819, 1534166222, 1670523624, 1806881027, 1943238430, 2079595832, 2079014059, 1942656657, 1806299254, 1669941852, 1533584449, 1397227047, 1260869644, 1124512241, 988154839, 851797436, 715440034, 579082631, 442725229, 306367826, 170010424, 33653021, -102704382, -239061784, -375419187, -511776589, -648133992, -784491394, -920848797, -1057206199, -1193563602, -1329921005, -1466278407, -1602635810, -1738993212, -1875350615, -2011708017,
  -2147483647, -2003020470, -1858557293, -1714094115, -1569630938, -1425167761, -1280704584, -1136241407, -991778229, -847315052, -702851875, -558388698, -413925521, -269462344, -124999166, 19464011, 163927188, 308390365, 452853542, 597316720, 741779897, 886243074, 1030706251, 1175169428, 1319632606, 1464095783, 1608558960, 1753022137, 1897485314, 2041948492, 2108555625, 1964092448, 1819629271, 1675166094, 1530702916, 1386239739, 1241776562, 1097313385, 952850208, 808387031, 663923853, 519460676, 374997499, 230534322, 86071145, -58392033, -202855210, -347318387, -491781564, -636244741, -780707919, -925171096, -1069634273, -1214097450, -1358560627, -1503023805, -1647486982, -1791950159, -1936413336, -2080876513,
  -2147483647, -1994426631, -1841369614, -1688312598, -1535255582, -1382198566, -1229141549, -1076084533, -923027517, -769970500, -616913484, -463856468, -310799451, -157742435, -4685419, 148371597, 301428614, 454485630, 607542646, 760599663, 913656679, 1066713695, 1219770711, 1372827728, 1525884744, 1678941760, 1831998777, 1985055793, 2138112809, 2003797468, 1850740452, 1697683436, 1544626420, 1391569403, 1238512387, 1085455371, 932398354, 779341338, 626284322, 473227305, 320170289, 167113273, 14056257, -139000760, -292057776, -445114792, -598171809, -751228825, -904285841, -1057342857, -1210399874, -1363456890, -1516513906, -1669570923, -1822627939, -1975684955, -2128741972,
  -2147483647, -1985329109, -1823174571, -1661020033, -1498865495, -1336710957, -1174556419, -1012401882, -850247344, -688092806, -525938268, -363783730, -201629192, -39474654, 122679884, 284834422, 446988960, 609143498, 771298036, 933452574, 1095607112, 1257761649, 1419916187, 1582070725, 1744225263, 1906379801, 2068534339, 2064278417, 1902123879, 1739969341, 1577814803, 1415660265, 1253505727, 1091351189, 929196651, 767042114, 604887576, 442733038, 280578500, 118423962, -43730576, -205885114, -368039652, -530194190, -692348728, -854503266, -1016657804, -1178812342, -1340966880, -1503121417, -1665275955, -1827430493, -1989585031,
  -2147483647, -1975684955, -1803886263, -1632087572, -1460288880, -1288490188, -1116691496, -944892805, -773094113, -601295421, -429496729, -257698038, -85899346, 85899346, 257698038, 429496729, 601295421, 773094113, 944892805, 1116691496, 1288490188, 1460288880, 1632087572, 1803886263, 1975684955, 2147483647, 1975684955, 1803886263, 1632087572, 1460288880, 1288490188, 1116691496, 944892805, 773094113, 601295421, 429496729, 257698038, 85899346, -85899346, -257698038, -429496729, -601295421, -773094113, -944892805, -1116691496, -1288490188, -1460288880, -1632087572, -1803886263, -1975684955, -2147483647,
  -2147483647, -1965470742, -1783457837, -1601444932, -1419432027, -1237419123, -1055406218, -873393313, -691380408, -509367503, -327354598, -145341693, 36671212, 218684117, 400697021, 582709926, 764722831, 946735736, 1128748641, 1310761546, 1492774451, 1674787356, 1856800261, 2038813165, 2074141224, 1892128319, 1710115414, 1528102509, 1346089604, 1164076699, 982063794, 800050889, 618037985, 436025080, 254012175, 71999270, -110013635, -292026540, -474039445, -656052350, -838065255, -1020078159, -1202091064, -1384103969, -1566116874, -1748129779, -1930142684, -2112155589,
  -2147483647, -1954647425, -1761811202, -1568974980, -1376138757, -1183302535, -990466312, -797630090, -604793867, -411957645, -219121422, -26285200, 166551023, 359387245, 552223468, 745059690, 937895913, 1130732135, 1323568357, 1516404580, 1709240802, 1902077025, 2094913247, 2007217824, 1814381602, 1621545379, 1428709157, 1235872934, 1043036712, 850200489, 657364267, 464528044, 271691822, 78855600, -113980623, -306816845, -499653068, -692489290, -885325513, -1078161735, -1270997958, -1463834180, -1656670403, -1849506625, -2042342848,












  2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,

    -2147483647, -1987058090, -1826856432, -1667102259, -1508018535, -1349827286, -1192749291, -1037003779, -882808117, -730377509, -579924697, -431659660, -285789327, -142517282, -2043483, 135436015, 269729338, 400649059, 528012459, 651641782, 771364484, 887013472, 998427341, 1105450594, 1207933865, 1305734121, 1398714866, 1486746332, 1569705657, 1647477057, 1719951991, 1787029307, 1848615391, 1904624287, 1954977827, 1999605735, 2038445725, 2071443591, 2098553277, 2119736949, 2134965041, 2144216301, 2147477815, 2144745034, 2136021769, 2121320197, 2100660836, 2074072518, 2041592353, 2003265671, 1959145964, 1909294806, 1853781775, 1792684346, 1726087790, 1654085055, 1576776630, 1494270413, 1406681553, 1314132294, 1216751805, 1114675993, 1008047324, 897014613, 781732824, 662362851, 539071294, 412030226, 281416952, 147413764, 10207684, -130009794, -273042975, -418692234, -566754295, -717022512, -869287164, -1023335741, -1178953243, -1335922483, -1494024384, -1653038291, -1812742274, -1972913442, -2133328249,
  -2147483647, -1977528024, -1807838631, -1638681281, -1470320953, -1303021379, -1137044628, -972650697, -810097104, -649638484, -491526190, -336007901, -183327229, -33723345, 112569401, 255321847, 394310376, 529317266, 660131034, 786546764, 908366430, 1025399206, 1137461762, 1244378558, 1345982111, 1442113262, 1532621425, 1617364822, 1696210706, 1769035566, 1835725325, 1896175516, 1950291444, 1997988341, 2039191488, 2073836345, 2101868639, 2123244460, 2137930324, 2145903224, 2147150672, 2141670714, 2129471934, 2110573441, 2085004838, 2052806179, 2014027901, 1968730749, 1916985681, 1858873751, 1794485993, 1723923266, 1647296104, 1564724543, 1476337927, 1382274711, 1282682243, 1177716530, 1067541998, 952331233, 832264707, 707530501, 578324008, 444847625, 307310439, 165927896, 20921470, -127481694, -279049126, -433543400, -590722506, -750340228, -912146531, -1075887949, -1241307987, -1408147521, -1576145200, -1745037863, -1914560944, -2084448891,
  -2147483647, -1967428909, -1787690751, -1608585199, -1430427165, -1253529894, -1078204417, -904758998, -733498598, -564724336, -398732959, -235816320, -76260868, 79652858, 231650725, 379465482, 522837233, 661513896, 795251642, 923815328, 1046978906, 1164525823, 1276249405, 1381953211, 1481451390, 1574568998, 1661142311, 1741019112, 1814058958, 1880133427, 1939126342, 1990933981, 2035465251, 2072641857, 2102398432, 2124682657, 2139455351, 2146690540, 2146375502, 2138510791, 2123110235, 2100200914, 2069823105, 2032030223, 1986888715, 1934477951, 1874890084, 1808229883, 1734614554, 1654173529, 1567048246, 1473391892, 1373369137, 1267155847, 1154938772, 1036915216, 913292695, 784288567, 650129655, 511051842, 367299662, 219125868, 66790985, -89437143, -249283829, -412468023, -578702806, -747695896, -919150161, -1092764142, -1268232582, -1445246964, -1623496054, -1802666443, -1982443107,
  -2147483647, -1956724201, -1766341244, -1576710524, -1388206300, -1201200613, -1016062542, -833157483, -652846424, -475485232, -301423954, -131006122, 35431919, 197561683, 355063185, 507625575, 654947749, 796738948, 932719328, 1062620513, 1186186126, 1303172293, 1413348127, 1516496181, 1612412877, 1700908912, 1781809628, 1854955354, 1920201729, 1977419980, 2026497179, 2067336465, 2099857237, 2123995311, 2139703047, 2146949444, 2145720199, 2136017739, 2117861213, 2091286456, 2056345915, 2013108552, 1961659701, 1902100903, 1834549705, 1759139429, 1676018907, 1585352188, 1487318216, 1382110474, 1269936603, 1151017994, 1025589349, 893898217, 756204509, 612779982, 463907703, 309881493, 151005342, -12407186, -180033575, -351542990, -526596937, -704849921, -885950136, -1069540158, -1255257646, -1442736062, -1631605392, -1821492878, -2012023750,
  -2147483647, -1945389659, -1743743364, -1542991465, -1343578683, -1145946771, -950533539, -757771880, -568088816, -381904545, -199631517, -21673518, 151575227, 319730924, 482421063, 639285239, 789975955, 934159391, 1071516140, 1201741919, 1324548242, 1439663059, 1546831360, 1645815737, 1736396913, 1818374225, 1891566071, 1955810310, 2010964626, 2056906834, 2093535161, 2120768466, 2138546417, 2146829633, 2145599765, 2134859535, 2114632738, 2084964181, 2045919587, 1997585453, 1940068849, 1873497193, 1798017959, 1713798353, 1621024945, 1519903255, 1410657294, 1293529072, 1168778060, 1036680617, 897529374, 751632589, 599313465, 440909430, 276771392, 107262962, -67240351, -246351976, -429675130, -616803702, -807323152, -1000811426, -1196839894, -1394974299, -1594775719, -1795801540, -1997606433,
  -2147483647, -1933382711, -1719814136, -1507308958, -1296395571, -1087598410, -881436647, -678422903, -479061970, -283849558, -93271061, 92199647, 272101397, 445986861, 613423677, 773995512, 927303105, 1072965260, 1210619786, 1339924408, 1460557609, 1572219436, 1674632244, 1767541381, 1850715832, 1923948783, 1987058140, 2039886982, 2082303952, 2114203579, 2135506545, 2146159881, 2146137097, 2135438249, 2114089940, 2082145254, 2039683619, 1986810617, 1923657716, 1850381945, 1767165504, 1674215311, 1571762485, 1460061775, 1339390924, 1210049979, 1072360547, 926664990, 773325580, 612723595, 445258370, 271346307, 91419837, -94073653, -284672935, -479904086, -679281664, -882309917, -1088484018, -1297291315, -1508212611, -1720723450, -1934295426,
  -2147483647, -1920666979, -1694483318, -1469563903, -1246536447, -1026023381, -808640119, -594993342, -385679301, -181282156, 17627657, 210495012, 396781650, 575967678, 747553017, 911058801, 1066028715, 1212030263, 1348655981, 1475524568, 1592281956, 1698602296, 1794188865, 1878774898, 1952124328, 2014032452, 2064326493, 2102866089, 2129543684, 2144284823, 2147048368, 2137826606, 2116645273, 2083563483, 2038673561, 1982100787, 1914003046, 1834570389, 1744024496, 1642618068, 1530634111, 1408385154, 1276212373, 1134484640, 983597492, 823972031, 656053742, 480311259, 297235048, 107336043, -88855780, -290792882, -497911691, -709634175, -925369452, -1144515442, -1366460545, -1590585350, -1816264363, -2042867754,
  -2147483647, -1907187787, -1667644693, -1429604770, -1193813717, -961010187, -731923473, -507271226, -287757206, -74069074, 133123758, 333172224, 525449642, 709353671, 884308203, 1049765166, 1205206239, 1350144477, 1484125840, 1606730609, 1717574706, 1816310893, 1902629863, 1976261210, 2036974270, 2084578851, 2118925824, 2139907591, 2147458423, 2141554668, 2122214818, 2089499459, 2043511077, 1984393738, 1912332637, 1827553516, 1730321960, 1620942561, 1499757969, 1367147812, 1223527514, 1069346988, 905089228, 731268799, 548430220, 357146263, 158016155, -48336298, -261264663, -480101910, -704162494, -932744511, -1165131892, -1400596646, -1638401142, -1877800419, -2118044523,
  -2147483647, -1892921174, -1639253746, -1387373264, -1138165343, -892506202, -651259582, -415273712, -185378322, 37618274, 252932013, 459805851, 657512415, 845356565, 1022677838, 1188852770, 1343297087, 1485467760, 1614864913, 1731033586, 1833565327, 1922099632, 1996325213, 2055981092, 2100857519, 2130796705, 2145693386, 2145495183, 2130202795, 2099869988, 2054603415, 1994562232, 1919957545, 1831051667, 1728157191, 1611635896, 1481897474, 1339398086, 1184638763, 1018163641, 840558050, 652446453, 454490255, 247385473, 31860290, -191327503, -421393173, -657527808, -898901152, -1144664533, -1393953843, -1645892577, -1899594914,
  -2147483647, -1877800419, -1609181508, -1342687029, -1079368715, -820265763, -566400733, -318775515, -78367373, 153874913, 377034787, 590231541, 792623784, 983412766, 1161845530, 1327217884, 1478877178, 1616224883, 1738718950, 1845875951, 1937272985, 2012549352, 2071407968, 2113616547, 2139008510, 2147483647, 2139008510, 2113616547, 2071407968, 2012549352, 1937272985, 1845875951, 1738718950, 1616224883, 1478877178, 1327217884, 1161845530, 983412766, 792623784, 590231541, 377034787, 153874913, -78367373, -318775515, -566400733, -820265763, -1079368715, -1342687029, -1609181508, -1877800419, -2147483647,
  -2147483647, -1861789550, -1577360962, -1295457786, -1017328740, -744205823, -477298857, -217790134, 33170828, 274472374, 505045636, 723869268, 929973970, 1122446780, 1300435124, 1463150583, 1609872396, 1739950643, 1852809131, 1947947942, 2024945650, 2083461186, 2123235350, 2144091959, 2145938626, 2128767172, 2092653658, 2037758054, 1964323524, 1872675354, 1763219507, 1636440830, 1492900900, 1333235541, 1158152006, 968425843, 764897464, 548468416, 320097392, 80795984, -168375800, -426314231, -691876745, -963887008, -1241140124, -1522407976, -1806444659, -2091992007,
  -2147483647, -1844828259, -1543677626, -1245529020, -951864789, -664144986, -383800106, -112223981, 149233156, 399271382, 636647547, 860181454, 1068761727, 1261351340, 1436992766, 1594812746, 1734026622, 1853942246, 1953963415, 2033592842, 2092434620, 2130196199, 2146689832, 2141833518, 2115651400, 2068273651, 1999935827, 1910977692, 1801841533, 1673069955, 1525303193, 1359275917, 1175813590, 975828357, 760314513, 530343559, 287058873, 31670028, -234553222, -510287259, -794161176, -1084763598, -1380649694, -1680348368, -1982369563
};

const int16_t wave_lut_offset [] = {0, 755, 1510, 2256, 3020};
const String waveforms [] = {"SIN", "SAW", "TRG", "SQR", "CML"};

// Knob detection structure
class Knob {
  private:
    const int8_t increment [16] = {0, 1, -1, 2, -1, 0, 2, 1, 1, 2, 0, -1, 2, -1, 1, 0};
    int16_t *state;
    int16_t lowerLimit;
    int16_t upperLimit;
    int8_t selector;
    int8_t currentValue;
    int8_t previousValue;
    int8_t prevRotDir;
  public:
    int16_t count = 0;

    Knob (int16_t st[16], int16_t l, int16_t u, int8_t s){
      state = st;
      lowerLimit = l;
      count = (l+u)/2;
      upperLimit = u;
      selector = s;
    }

    void decode(const int8_t value){
      previousValue = currentValue;
      currentValue = value&selector;
      int16_t my_state = previousValue*100 + currentValue;

      for (int8_t i = 0; i < 17; i++){
        if(my_state == *(state+i)){
          if(increment[i] != 2){
            count += increment[i];
          } else {
            count += prevRotDir*2;
          }
          if(increment[i] == -1 || increment[i] == 1){prevRotDir == increment[i];}
          break;
        }
      }

      // Limiting values
      if(count > upperLimit){count = upperLimit;}
      if(count < lowerLimit){count = lowerLimit;}
    }
};

int16_t knob2_state[] = {0, 4, 8, 12, 400, 404, 408, 412, 800, 804, 808, 812, 1200, 1204, 1208, 1212};
Knob knob2_obj(knob2_state, 0, 32, 12);

int16_t knob3_state[] = {0, 1, 2, 3, 100, 101, 102, 103, 200, 201, 202, 203, 300, 301, 302, 303};
Knob knob3_obj(knob3_state, 2, 14, 3);
Knob knob0_obj(knob2_state, 0, 32, 12);
Knob knob1_obj(knob3_state, 0, 8, 3);

//Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value) {
      digitalWrite(REN_PIN,LOW);
      digitalWrite(RA0_PIN, bitIdx & 0x01);
      digitalWrite(RA1_PIN, bitIdx & 0x02);
      digitalWrite(RA2_PIN, bitIdx & 0x04);
      digitalWrite(OUT_PIN,value);
      digitalWrite(REN_PIN,HIGH);
      delayMicroseconds(2);
      digitalWrite(REN_PIN,LOW);
}

//Function to read collumns
uint8_t readCols(){
      uint8_t c0 = digitalRead(C0_PIN);
      uint8_t c1 = digitalRead(C1_PIN) << 1;
      uint8_t c2 = digitalRead(C2_PIN) << 2;
      uint8_t c3 = digitalRead(C3_PIN) << 3;

      return (c0 + c1 + c2 + c3);
}

void setRow(uint8_t rowIdx){
  //disable decoder
  digitalWrite(REN_PIN, LOW);

  
  //select the row
  switch (rowIdx){
    case 0:
      digitalWrite(RA0_PIN, LOW);
      digitalWrite(RA1_PIN, LOW);
      digitalWrite(RA2_PIN, LOW); 
      break;

    case 1:
      digitalWrite(RA0_PIN, HIGH);
      digitalWrite(RA1_PIN, LOW);
      digitalWrite(RA2_PIN, LOW); 
      break;

    case 2:
      digitalWrite(RA0_PIN, LOW);
      digitalWrite(RA1_PIN, HIGH);
      digitalWrite(RA2_PIN, LOW); 
      break;

    case 3:
      digitalWrite(RA0_PIN, HIGH);
      digitalWrite(RA1_PIN, HIGH);
      digitalWrite(RA2_PIN, LOW); 
      break;

    case 4:
      digitalWrite(RA0_PIN, LOW);
      digitalWrite(RA1_PIN, LOW);
      digitalWrite(RA2_PIN, HIGH); 
      break;

    case 5:
      digitalWrite(RA0_PIN, HIGH);
      digitalWrite(RA1_PIN, LOW);
      digitalWrite(RA2_PIN, HIGH); 
      break;

    case 6:
      digitalWrite(RA0_PIN, LOW);
      digitalWrite(RA1_PIN, HIGH);
      digitalWrite(RA2_PIN, HIGH); 
      break;

    default:
      Serial.println("Row address exceeds 3");
  }
  
  //enable decoder
  digitalWrite(REN_PIN, HIGH);

}

int8_t decodeKey(const int8_t bit0, const int8_t bit1, const int8_t bit2){
  int32_t value = bit0*10000 + bit1*100 + bit2;

  for(int8_t i = 0; i < 12; i++){
    if (stepSizeLUT[i] == value){
      return i;
    }
  }

  return 12;
}

volatile int8_t pressed_keys[4] = {12};
volatile int8_t pressed_octave[4] = {my_octave, my_octave, my_octave, my_octave};
volatile int8_t previous_pressed_keys[4] = {12};
volatile int8_t played_notes [4] = {12,12,12,12};
volatile int8_t played_octave;
int8_t played_notes1[4] = {12, 12, 12, 12};
int8_t played_octave1 [4];
uint32_t c = 0;
const int16_t key_select [] = {256, 512, 1024, 2048, 16, 32, 64, 128, 1, 2, 4, 8};
const int16_t key_power [] = {8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};


void decodeMultipleKeys(const int8_t w0, const int8_t w1, const int8_t w2){
  int8_t index = 0;
  int16_t value = (w0 << 8) + (w1 << 4) + w2;

  // CAN message container
  uint8_t TX_Message[8] = {0};

  // previous press
  for(int8_t i = 0; i < 4; i++){
    previous_pressed_keys[i] = pressed_keys[i];
  }

  // Reset pressed keys
  for(int8_t i = 0; i < 4; i++){
    pressed_keys[i] = 12;
  }

  // Scan for new keys
  for (int8_t i = 0; i < 12; i++){
    if(index > 3){break;}
    if((value&key_select[i])>>key_power[i] == 0){
      pressed_keys[index] = i;
      index++;
    }
  }

  // Format message
  TX_Message[0] = pressed_keys[0];
  TX_Message[1] = pressed_keys[1];
  TX_Message[2] = pressed_keys[2];
  TX_Message[3] = pressed_keys[3];
  TX_Message[4] = my_octave;
  TX_Message[5] = my_octave;
  TX_Message[6] = my_octave;
  if (has_right) {
    TX_Message[7] = 0;
  } else if (has_left) {
    TX_Message[7] = 2;
  } else {
    TX_Message[7] = 1;
  }
  

  // Detect changes
  bool no_changes_detected = true;
  for (int8_t i = 0; i < 4; i++){
    no_changes_detected = no_changes_detected && (pressed_keys[i] == previous_pressed_keys[i]);
  }

  // Send message if change has been detected
  if(!no_changes_detected && !is_main){
    c++;
    xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
  }
  
}

void CAN_RX_ISR (void){
  uint8_t RX_Message_ISR[8];
  uint32_t ID;
  CAN_RX(ID, RX_Message_ISR);
  xQueueSendFromISR(msgInQ, RX_Message_ISR, NULL);
}



void decodeTask(void * pvParameters){
  uint8_t RX_Message[8];
  while(1){
    xQueueReceive(msgInQ, RX_Message, portMAX_DELAY);
    played_notes[0] = RX_Message[0];
    played_notes[1] = RX_Message[1];
    played_notes[2] = RX_Message[2];
    played_notes[3] = RX_Message[3];
    played_octave = RX_Message[4];
    octave_modifier = RX_Message[7];
  }
}

void CAN_TX_Task(void * pvParameters){
  uint8_t msgOut[8];
  while (1) {
    xQueueReceive(msgOutQ, msgOut, portMAX_DELAY);
    xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
    CAN_TX(0x123, msgOut);
  }
}

void CAN_TX_ISR (void) {
  xSemaphoreGiveFromISR(CAN_TX_Semaphore,NULL);
}

void GEN_ISR (){
  static uint64_t time_now = 0;
  static uint64_t time_prev = 0;

  static int32_t phaseAcc = 0;
  static uint16_t counter = 0;
  static uint16_t lenCount = 0;

  static int32_t phaseAcc1 = 0;
  static uint16_t counter1 = 0;
  static uint16_t lenCount1 = 0;

  static int32_t phaseAcc2 = 0;
  static uint16_t counter2 = 0;
  static uint16_t lenCount2 = 0;

  static int32_t phaseAcc3 = 0;
  static uint16_t counter3 = 0;
  static uint16_t lenCount3 = 0;

  static int32_t phaseAccTotal = 0;

  time_prev = micros();

  int8_t index = 0;
  int8_t index1 = 0;
    for (int8_t i = 0; i < 4; i++){
      if (pressed_keys[i] == 12){
        played_notes1[i] = played_notes[index];
        played_octave1[i] = my_octave-1+octave_modifier;
        index++;
      } else {
        played_notes1[i] = pressed_keys[index1];
        played_octave1[i] = my_octave;
        index1++;
      }
    }

  if(played_notes1[0] != 12){phaseAcc = wave_lut[sine_lut_start_index[played_notes1[0]]+lenCount+wave_lut_offset[knob1_obj.count/2]];} else {phaseAcc = 0; counter = 0; lenCount = 0;}
  if(played_notes1[0] != 12){
  if(counter == oct_count[played_octave1[0]]){
    counter = 0;
    if(lenCount >= sine_lut_sizes[played_notes1[0]]){
    lenCount = 0;
    } else {
    lenCount+=oct_lenCount[played_octave1[0]];
  }
  } else {
    counter++;
  }
  }

  if(played_notes1[1] != 12){phaseAcc1 = wave_lut[sine_lut_start_index[played_notes1[1]]+lenCount1+wave_lut_offset[knob1_obj.count/2]];} else {phaseAcc1 = 0; counter1 = 0; lenCount1 = 0;}
  if(played_notes1[1] != 12){
  if(counter1 == oct_count[played_octave1[1]]){
    counter1 = 0;
    if(lenCount1 >= sine_lut_sizes[played_notes1[1]]){
    lenCount1 = 0;
    } else {
    lenCount1+=oct_lenCount[played_octave1[1]];
    }
  } else {
    counter1++;
  }
  }

  if(played_notes1[2] != 12){phaseAcc2 = wave_lut[sine_lut_start_index[played_notes1[2]]+lenCount2+wave_lut_offset[knob1_obj.count/2]];} else {phaseAcc2 = 0; counter2 = 0; lenCount2 = 0;}
  if(played_notes1[2] != 12){
  if(counter2 == oct_count[played_octave1[2]]){
    counter2 = 0;
    if(lenCount2 >= sine_lut_sizes[played_notes1[2]]){
    lenCount2 = 0;
    } else {
    lenCount2+=oct_lenCount[played_octave1[2]];
  }
  } else {
    counter2++;
  }
  }

  if(played_notes1[3] != 12){phaseAcc3 = wave_lut[sine_lut_start_index[played_notes1[3]]+lenCount3+wave_lut_offset[knob1_obj.count/2]];} else {phaseAcc3 = 0; counter3 = 0; lenCount3 = 0;}
  if(played_notes1[3] != 12){
  if(counter3 == oct_count[played_octave1[3]]){
    counter3 = 0;
    if(lenCount3 >= sine_lut_sizes[played_notes1[3]]){
    lenCount3 = 0;
    } else {
    lenCount3+=oct_lenCount[played_octave1[3]];
  }
  } else {
    counter3++;
  }
  }
  
  if(played_notes1[1] == 12){
    phaseAccTotal = phaseAcc;
  } else if(played_notes1[2] == 12) {
    phaseAccTotal = phaseAcc/2 + phaseAcc1/2;
  } else if(played_notes1[3] == 12) {
    phaseAccTotal = phaseAcc/3 + phaseAcc1/3 + phaseAcc2/3;
  } else {
    phaseAccTotal = phaseAcc/4 + phaseAcc1/4 + phaseAcc2/4 + phaseAcc3/4;
  }

  xQueueSendFromISR(SampleQ, (void *) &phaseAccTotal, NULL);
  time_delta = micros() - time_prev;
}

void scanKeysTask(void * pvParameters){
  static int8_t prev_val = 0;
  static int8_t cur_val = 0;

  const TickType_t xFrequency = 20/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();

  while (1){
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
    // keypress detection code

    xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
    prev_val = cur_val;
    for (int i = 0; i < 7; i++){
      // select the row to read
      setRow(i);
      delayMicroseconds(3);

      //record the value into the array
      keyArray[i] = readCols();
      
    }

    currentIndex = decodeKey(keyArray[0], keyArray[1], keyArray[2]);
    decodeMultipleKeys(keyArray[0], keyArray[1], keyArray[2]);
    knob2_obj.decode(keyArray[3]);
    knob3_obj.decode(keyArray[3]);
    my_octave = knob3_obj.count/2;
    knob1_obj.decode(keyArray[4]);
    knob0_obj.decode(keyArray[4]);
    reverb_count = knob0_obj.count/2;
    cur_val = keyArray[6];
    if (prev_val == 15 && cur_val == 14){
      reverb_active = !reverb_active;
    }
    xSemaphoreGive(keyArrayMutex);
  }
}

void handshake(){
  xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
  for (int i = 0; i < 7; i++){
      // select the row to read
      setRow(i);
      delayMicroseconds(3);

      //record the value into the array
      keyArray[i] = readCols();
      
  }

  if ((keyArray[5] == 7 && keyArray[6] == 7) || (keyArray[5] == 15 && keyArray[6] == 15)){
    is_main = true;
  } else {
    is_main = false;
  }

  if (keyArray[5] == 7){has_left = true;}
  if (keyArray[6] == 7){has_right = true;}

  xSemaphoreGive(keyArrayMutex);
}

void displayUpdateTask(void * pvParameters){
  const TickType_t xFrequency = 100/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();

  while(1){
    TickType_t xLastWakeTime = xTaskGetTickCount();
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.setCursor(22,20);
    u8g2.print(waveforms[knob1_obj.count/2]);
    u8g2.setCursor(22,10);
    u8g2.print(Notes[played_notes1[0]]);
    u8g2.setCursor(42,10);
    u8g2.print(Notes[played_notes1[1]]);
    u8g2.setCursor(62,10);
    u8g2.print(Notes[played_notes1[2]]);
    u8g2.setCursor(82,10);
    u8g2.print(Notes[played_notes1[3]]);
    u8g2.setCursor(100,10);
    u8g2.print(knob2_obj.count/2);
    u8g2.setCursor(100,20);
    u8g2.print(my_octave);
    u8g2.setCursor(82,30);
    u8g2.print(reverb_count);
    u8g2.setCursor(100,30);
    u8g2.print(reverb_active);
    u8g2.setCursor(2,30);
    u8g2.print(time_delta);
    u8g2.sendBuffer();
  }
}

void sampleISR(){
  int32_t Vout;
/*
if (reverb_active){
  if (delayCounter < 3000){
    delayCounter++;
    Vout = Buffer.pop();
    DelayBuffer.push(Vout);
  } else {
    int32_t val = Buffer.pop();
    Vout = (val/2)+(DelayBuffer.pop()/3);
    DelayBuffer.push(val);
  }
} else {
  delayCounter = 0;
  Vout = Buffer.pop();
  int32_t del = DelayBuffer.pop();
}
*/
  xQueueReceiveFromISR(SampleQ, &Vout, NULL);
  if (is_main){Vout = Vout >> 24;} else {Vout = 0;}
  Vout = Vout >> (8 - knob2_obj.count/4);
  analogWrite(OUTR_PIN, Vout + 128);
}

void setup() {
  // put your setup code here, to run once:

  //Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);

  //Initialise display
  setOutMuxBit(DRST_BIT, LOW);  //Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH);  //Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH);  //Enable display power supply

  //Initialise UART
  Serial.begin(9600);
  Serial.println("Hello World");
  //Serial.println(String(played_notes[0]) + String(played_notes[1]) + String(played_notes[2]) + String(played_notes[3]));

  //

  //Setup timer
  TIM_TypeDef *Instance = TIM1;
  HardwareTimer *sampleTimer = new HardwareTimer(Instance);
  sampleTimer->setOverflow(22000, HERTZ_FORMAT);
  sampleTimer->attachInterrupt(sampleISR);
  sampleTimer->resume();

  //Setup timer 2
  TIM_TypeDef *Instance2 = TIM2;
  HardwareTimer *sampleTimer2 = new HardwareTimer(Instance2);
  sampleTimer2->setOverflow(22000, HERTZ_FORMAT);
  sampleTimer2->attachInterrupt(GEN_ISR);
  sampleTimer2->resume();

  // Keyboard Scanning Thread intialisaation
  TaskHandle_t scanKeysHandle = NULL;
  xTaskCreate(
    scanKeysTask, // Function that implements the task
    "scanKeys", // Task name
    64, // Stack size in words
    NULL, // Parameter passed into the task
    4, // Task priority
    &scanKeysHandle // Pointer to store the task handle
  );


  // Decode Thread initialisation
  TaskHandle_t decodeHandle = NULL;
  xTaskCreate(
    decodeTask, // Function that implements the task
    "decode", // Task name
    64, // Stack size in words
    NULL, // Parameter passed into the task
    3, // Task priority
    &decodeHandle // Pointer to store the task handle
  );

  TaskHandle_t TX_Handle = NULL;
  xTaskCreate(
    CAN_TX_Task, // Function that implements the task
    "TX", // Task name
    64, // Stack size in words
    NULL, // Parameter passed into the task
    2, // Task priority
    &TX_Handle // Pointer to store the task handle
  );

  // Display Updating Thread intialisaation
  TaskHandle_t displayUpdateHandle = NULL;
  xTaskCreate(
    displayUpdateTask, // Function that implements the task
    "displayUpdate", // Task name
    256, // Stack size in words
    NULL, // Parameter passed into the task
    1, // Task priority
    &displayUpdateHandle // Pointer to store the task handle
  );

  // Creating Key Array mutex
  keyArrayMutex = xSemaphoreCreateMutex();
  CAN_TX_Semaphore = xSemaphoreCreateCounting(3,3);

  // Handshake
  handshake();

  // Start the CAN communication
  CAN_Init(false);
  CAN_RegisterRX_ISR(CAN_RX_ISR);
  CAN_RegisterTX_ISR(CAN_TX_ISR);
  setCANFilter(0x123,0x7ff);
  CAN_Start();

  // Initialise the receive queue
  msgInQ = xQueueCreate(36, 8);
  msgOutQ = xQueueCreate(36, 8);
  SampleQ = xQueueCreate(128, sizeof(int32_t));

  // Start the tasks
  vTaskStartScheduler();
}



void loop() {
 // Empty loop

}

